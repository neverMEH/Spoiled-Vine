[{"/home/project/components/theme-provider.tsx":"1","/home/project/components/ui/accordion.tsx":"2","/home/project/components/ui/alert-dialog.tsx":"3","/home/project/components/ui/alert.tsx":"4","/home/project/components/ui/aspect-ratio.tsx":"5","/home/project/components/ui/avatar.tsx":"6","/home/project/components/ui/badge.tsx":"7","/home/project/components/ui/breadcrumb.tsx":"8","/home/project/components/ui/button.tsx":"9","/home/project/components/ui/calendar.tsx":"10","/home/project/components/ui/card.tsx":"11","/home/project/components/ui/carousel.tsx":"12","/home/project/components/ui/chart.tsx":"13","/home/project/components/ui/checkbox.tsx":"14","/home/project/components/ui/collapsible.tsx":"15","/home/project/components/ui/command.tsx":"16","/home/project/components/ui/context-menu.tsx":"17","/home/project/components/ui/dialog.tsx":"18","/home/project/components/ui/drawer.tsx":"19","/home/project/components/ui/dropdown-menu.tsx":"20","/home/project/components/ui/form.tsx":"21","/home/project/components/ui/hover-card.tsx":"22","/home/project/components/ui/input-otp.tsx":"23","/home/project/components/ui/input.tsx":"24","/home/project/components/ui/label.tsx":"25","/home/project/components/ui/menubar.tsx":"26","/home/project/components/ui/navigation-menu.tsx":"27","/home/project/components/ui/pagination.tsx":"28","/home/project/components/ui/popover.tsx":"29","/home/project/components/ui/progress.tsx":"30","/home/project/components/ui/radio-group.tsx":"31","/home/project/components/ui/resizable.tsx":"32","/home/project/components/ui/scroll-area.tsx":"33","/home/project/components/ui/select.tsx":"34","/home/project/components/ui/separator.tsx":"35","/home/project/components/ui/sheet.tsx":"36","/home/project/components/ui/skeleton.tsx":"37","/home/project/components/ui/slider.tsx":"38","/home/project/components/ui/sonner.tsx":"39","/home/project/components/ui/switch.tsx":"40","/home/project/components/ui/table.tsx":"41","/home/project/components/ui/tabs.tsx":"42","/home/project/components/ui/textarea.tsx":"43","/home/project/components/ui/toast.tsx":"44","/home/project/components/ui/toaster.tsx":"45","/home/project/components/ui/toggle-group.tsx":"46","/home/project/components/ui/toggle.tsx":"47","/home/project/components/ui/tooltip.tsx":"48","/home/project/lib/utils.ts":"49","/home/project/src/App.tsx":"50","/home/project/src/components/auth/protected-route.tsx":"51","/home/project/src/components/charts/trend-chart.tsx":"52","/home/project/src/components/data-display/stat-card.tsx":"53","/home/project/src/components/data-table/columns.tsx":"54","/home/project/src/components/data-table/data-table-column-header.tsx":"55","/home/project/src/components/data-table/data-table-pagination.tsx":"56","/home/project/src/components/data-table/data-table-row-actions.tsx":"57","/home/project/src/components/data-table/data-table-toolbar.tsx":"58","/home/project/src/components/data-table/data-table-view-options.tsx":"59","/home/project/src/components/data-table/data-table.tsx":"60","/home/project/src/components/feedback/loading-spinner.tsx":"61","/home/project/src/components/forms/asin-input.tsx":"62","/home/project/src/components/forms/form-section.tsx":"63","/home/project/src/components/layout/container.tsx":"64","/home/project/src/components/layout/dashboard-layout.tsx":"65","/home/project/src/components/layout/section.tsx":"66","/home/project/src/components/layout/sidebar.tsx":"67","/home/project/src/components/reviews/case-template-dialog.tsx":"68","/home/project/src/components/reviews/product-header.tsx":"69","/home/project/src/components/reviews/product-info.tsx":"70","/home/project/src/components/reviews/review-list.tsx":"71","/home/project/src/components/reviews/review-stats.tsx":"72","/home/project/src/components/reviews/violation-scanner.tsx":"73","/home/project/src/components/theme-provider.tsx":"74","/home/project/src/components/typography.tsx":"75","/home/project/src/components/ui/avatar.tsx":"76","/home/project/src/components/ui/badge.tsx":"77","/home/project/src/components/ui/button.tsx":"78","/home/project/src/components/ui/card.tsx":"79","/home/project/src/components/ui/checkbox.tsx":"80","/home/project/src/components/ui/collapsible.tsx":"81","/home/project/src/components/ui/dialog.tsx":"82","/home/project/src/components/ui/dropdown-menu.tsx":"83","/home/project/src/components/ui/input.tsx":"84","/home/project/src/components/ui/label.tsx":"85","/home/project/src/components/ui/progress.tsx":"86","/home/project/src/components/ui/select.tsx":"87","/home/project/src/components/ui/switch.tsx":"88","/home/project/src/components/ui/table.tsx":"89","/home/project/src/components/ui/tabs.tsx":"90","/home/project/src/components/ui/textarea.tsx":"91","/home/project/src/contexts/auth-context.tsx":"92","/home/project/src/hooks/use-auth.ts":"93","/home/project/src/hooks/use-toast.ts":"94","/home/project/src/lib/apify-review-scraper.ts":"95","/home/project/src/lib/apify.ts":"96","/home/project/src/lib/config.ts":"97","/home/project/src/lib/database.types.ts":"98","/home/project/src/lib/supabase.ts":"99","/home/project/src/lib/utils.ts":"100","/home/project/src/main.tsx":"101","/home/project/src/pages/dashboard.tsx":"102","/home/project/src/pages/login.tsx":"103","/home/project/src/pages/profile.tsx":"104","/home/project/src/pages/request-reset.tsx":"105","/home/project/src/pages/reset-password.tsx":"106","/home/project/src/pages/reviews/details.tsx":"107","/home/project/src/pages/reviews/gather.tsx":"108","/home/project/src/pages/reviews/list.tsx":"109","/home/project/src/pages/signup.tsx":"110","/home/project/src/pages/verify-email.tsx":"111","/home/project/src/services/product-scraper.ts":"112","/home/project/src/services/queue-manager.ts":"113","/home/project/src/services/refresh-worker.ts":"114","/home/project/src/services/review-scraper.ts":"115"},{"size":1609,"mtime":1738007332551,"results":"116","hashOfConfig":"117"},{"size":2004,"mtime":1738007332441,"results":"118","hashOfConfig":"117"},{"size":4459,"mtime":1738007332555,"results":"119","hashOfConfig":"117"},{"size":1595,"mtime":1738007332396,"results":"120","hashOfConfig":"117"},{"size":158,"mtime":1738007332555,"results":"121","hashOfConfig":"117"},{"size":1430,"mtime":1738007332412,"results":"122","hashOfConfig":"117"},{"size":1134,"mtime":1738007332397,"results":"123","hashOfConfig":"117"},{"size":2724,"mtime":1738007332546,"results":"124","hashOfConfig":"117"},{"size":1846,"mtime":1738007332412,"results":"125","hashOfConfig":"117"},{"size":2633,"mtime":1738007332435,"results":"126","hashOfConfig":"117"},{"size":1905,"mtime":1738007332386,"results":"127","hashOfConfig":"117"},{"size":6296,"mtime":1738007332435,"results":"128","hashOfConfig":"117"},{"size":10551,"mtime":1738007332397,"results":"129","hashOfConfig":"117"},{"size":1078,"mtime":1738007332436,"results":"130","hashOfConfig":"117"},{"size":335,"mtime":1738007332551,"results":"131","hashOfConfig":"117"},{"size":4920,"mtime":1738007332414,"results":"132","hashOfConfig":"117"},{"size":7294,"mtime":1738007332555,"results":"133","hashOfConfig":"117"},{"size":3871,"mtime":1738007332412,"results":"134","hashOfConfig":"117"},{"size":3043,"mtime":1738007332412,"results":"135","hashOfConfig":"117"},{"size":7343,"mtime":1738007332558,"results":"136","hashOfConfig":"117"},{"size":4150,"mtime":1738007332386,"results":"137","hashOfConfig":"117"},{"size":1207,"mtime":1738007332547,"results":"138","hashOfConfig":"117"},{"size":2185,"mtime":1738007332441,"results":"139","hashOfConfig":"117"},{"size":851,"mtime":1738007332402,"results":"140","hashOfConfig":"117"},{"size":733,"mtime":1738007332402,"results":"141","hashOfConfig":"117"},{"size":8025,"mtime":1738007332415,"results":"142","hashOfConfig":"117"},{"size":5067,"mtime":1738007332559,"results":"143","hashOfConfig":"117"},{"size":2772,"mtime":1738007332547,"results":"144","hashOfConfig":"117"},{"size":1253,"mtime":1738007332415,"results":"145","hashOfConfig":"117"},{"size":798,"mtime":1738007332436,"results":"146","hashOfConfig":"117"},{"size":1493,"mtime":1738007332551,"results":"147","hashOfConfig":"117"},{"size":1732,"mtime":1738007332441,"results":"148","hashOfConfig":"117"},{"size":1665,"mtime":1738007332552,"results":"149","hashOfConfig":"117"},{"size":5652,"mtime":1738007332412,"results":"150","hashOfConfig":"117"},{"size":777,"mtime":1738007332441,"results":"151","hashOfConfig":"117"},{"size":4305,"mtime":1738007332402,"results":"152","hashOfConfig":"117"},{"size":264,"mtime":1738007332441,"results":"153","hashOfConfig":"117"},{"size":1098,"mtime":1738007332414,"results":"154","hashOfConfig":"117"},{"size":902,"mtime":1738007332414,"results":"155","hashOfConfig":"117"},{"size":1160,"mtime":1738007332414,"results":"156","hashOfConfig":"117"},{"size":2784,"mtime":1738007332402,"results":"157","hashOfConfig":"117"},{"size":1909,"mtime":1738007332386,"results":"158","hashOfConfig":"117"},{"size":778,"mtime":1738007332441,"results":"159","hashOfConfig":"117"},{"size":4883,"mtime":1738007332402,"results":"160","hashOfConfig":"117"},{"size":792,"mtime":1738007332415,"results":"161","hashOfConfig":"117"},{"size":1767,"mtime":1738007332555,"results":"162","hashOfConfig":"117"},{"size":1458,"mtime":1738007332414,"results":"163","hashOfConfig":"117"},{"size":1169,"mtime":1738007332415,"results":"164","hashOfConfig":"117"},{"size":169,"mtime":1738007332231,"results":"165","hashOfConfig":"117"},{"size":4109,"mtime":1738007332230,"results":"166","hashOfConfig":"117"},{"size":419,"mtime":1738007332577,"results":"167","hashOfConfig":"117"},{"size":3740,"mtime":1738010740523,"results":"168","hashOfConfig":"117"},{"size":950,"mtime":1738007332577,"results":"169","hashOfConfig":"117"},{"size":4574,"mtime":1738010743304,"results":"170","hashOfConfig":"117"},{"size":2152,"mtime":1738007332601,"results":"171","hashOfConfig":"117"},{"size":3247,"mtime":1738007332592,"results":"172","hashOfConfig":"117"},{"size":2603,"mtime":1738007332592,"results":"173","hashOfConfig":"117"},{"size":2815,"mtime":1738007332581,"results":"174","hashOfConfig":"117"},{"size":1626,"mtime":1738007332601,"results":"175","hashOfConfig":"117"},{"size":3894,"mtime":1738007332577,"results":"176","hashOfConfig":"117"},{"size":595,"mtime":1738007332579,"results":"177","hashOfConfig":"117"},{"size":8760,"mtime":1738007332573,"results":"178","hashOfConfig":"117"},{"size":647,"mtime":1738007332575,"results":"179","hashOfConfig":"117"},{"size":648,"mtime":1738007332573,"results":"180","hashOfConfig":"117"},{"size":1262,"mtime":1738007332578,"results":"181","hashOfConfig":"117"},{"size":526,"mtime":1738007332560,"results":"182","hashOfConfig":"117"},{"size":2098,"mtime":1738007332560,"results":"183","hashOfConfig":"117"},{"size":3761,"mtime":1738007332580,"results":"184","hashOfConfig":"117"},{"size":1652,"mtime":1738007332578,"results":"185","hashOfConfig":"117"},{"size":7823,"mtime":1738007332577,"results":"186","hashOfConfig":"117"},{"size":13561,"mtime":1738007332576,"results":"187","hashOfConfig":"117"},{"size":4887,"mtime":1738007332577,"results":"188","hashOfConfig":"117"},{"size":20233,"mtime":1738007332580,"results":"189","hashOfConfig":"117"},{"size":776,"mtime":1738007332561,"results":"190","hashOfConfig":"117"},{"size":2469,"mtime":1738007332552,"results":"191","hashOfConfig":"117"},{"size":1413,"mtime":1738007332548,"results":"192","hashOfConfig":"117"},{"size":1335,"mtime":1738007332493,"results":"193","hashOfConfig":"117"},{"size":1835,"mtime":1738007332548,"results":"194","hashOfConfig":"117"},{"size":1860,"mtime":1738007332441,"results":"195","hashOfConfig":"117"},{"size":1025,"mtime":1738007332556,"results":"196","hashOfConfig":"117"},{"size":351,"mtime":1738007332561,"results":"197","hashOfConfig":"117"},{"size":3853,"mtime":1738007332548,"results":"198","hashOfConfig":"117"},{"size":7327,"mtime":1738007332574,"results":"199","hashOfConfig":"117"},{"size":805,"mtime":1738007332542,"results":"200","hashOfConfig":"117"},{"size":716,"mtime":1738007332542,"results":"201","hashOfConfig":"117"},{"size":782,"mtime":1738007332556,"results":"202","hashOfConfig":"117"},{"size":4356,"mtime":1738007332549,"results":"203","hashOfConfig":"117"},{"size":1152,"mtime":1738007332549,"results":"204","hashOfConfig":"117"},{"size":2849,"mtime":1738007332545,"results":"205","hashOfConfig":"117"},{"size":1886,"mtime":1738007332441,"results":"206","hashOfConfig":"117"},{"size":777,"mtime":1738007332557,"results":"207","hashOfConfig":"117"},{"size":6484,"mtime":1738007332553,"results":"208","hashOfConfig":"117"},{"size":285,"mtime":1738007332384,"results":"209","hashOfConfig":"117"},{"size":444,"mtime":1738007332396,"results":"210","hashOfConfig":"117"},{"size":6279,"mtime":1738007332559,"results":"211","hashOfConfig":"117"},{"size":4629,"mtime":1738007332262,"results":"212","hashOfConfig":"117"},{"size":2205,"mtime":1738007332274,"results":"213","hashOfConfig":"117"},{"size":2160,"mtime":1738007332435,"results":"214","hashOfConfig":"117"},{"size":357,"mtime":1738007332320,"results":"215","hashOfConfig":"117"},{"size":834,"mtime":1738007332274,"results":"216","hashOfConfig":"117"},{"size":741,"mtime":1738010636491,"results":"217","hashOfConfig":"117"},{"size":8574,"mtime":1738007332412,"results":"218","hashOfConfig":"117"},{"size":7922,"mtime":1738007332320,"results":"219","hashOfConfig":"117"},{"size":15251,"mtime":1738007332384,"results":"220","hashOfConfig":"117"},{"size":4944,"mtime":1738007332546,"results":"221","hashOfConfig":"117"},{"size":6322,"mtime":1738007332550,"results":"222","hashOfConfig":"117"},{"size":8615,"mtime":1738007332554,"results":"223","hashOfConfig":"117"},{"size":2149,"mtime":1738007332550,"results":"224","hashOfConfig":"117"},{"size":3457,"mtime":1738007332441,"results":"225","hashOfConfig":"117"},{"size":11101,"mtime":1738007332364,"results":"226","hashOfConfig":"117"},{"size":1938,"mtime":1738007332441,"results":"227","hashOfConfig":"117"},{"size":6465,"mtime":1738007332559,"results":"228","hashOfConfig":"117"},{"size":6683,"mtime":1738007332554,"results":"229","hashOfConfig":"117"},{"size":3360,"mtime":1738007332557,"results":"230","hashOfConfig":"117"},{"size":6412,"mtime":1738007332558,"results":"231","hashOfConfig":"117"},{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"r4ovn0",{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","suppressedMessages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","suppressedMessages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","suppressedMessages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"250","messages":"251","suppressedMessages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","suppressedMessages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","suppressedMessages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","suppressedMessages":"261","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262"},{"filePath":"263","messages":"264","suppressedMessages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","suppressedMessages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","suppressedMessages":"271","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272"},{"filePath":"273","messages":"274","suppressedMessages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"276","messages":"277","suppressedMessages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","suppressedMessages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"282","messages":"283","suppressedMessages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","suppressedMessages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"288","messages":"289","suppressedMessages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","suppressedMessages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"294","messages":"295","suppressedMessages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","suppressedMessages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"300","messages":"301","suppressedMessages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"303","messages":"304","suppressedMessages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"306","messages":"307","suppressedMessages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"309","messages":"310","suppressedMessages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"312","messages":"313","suppressedMessages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"315","messages":"316","suppressedMessages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"318","messages":"319","suppressedMessages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"321","messages":"322","suppressedMessages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"324","messages":"325","suppressedMessages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"327","messages":"328","suppressedMessages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"330","messages":"331","suppressedMessages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"333","messages":"334","suppressedMessages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"336","messages":"337","suppressedMessages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"339","messages":"340","suppressedMessages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"342","messages":"343","suppressedMessages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"345","messages":"346","suppressedMessages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"348","messages":"349","suppressedMessages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"351","messages":"352","suppressedMessages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"354","messages":"355","suppressedMessages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"357","messages":"358","suppressedMessages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"360","messages":"361","suppressedMessages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"363","messages":"364","suppressedMessages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"366","messages":"367","suppressedMessages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"369","messages":"370","suppressedMessages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"372","messages":"373","suppressedMessages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"375","messages":"376","suppressedMessages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"378","messages":"379","suppressedMessages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"381","messages":"382","suppressedMessages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"384","messages":"385","suppressedMessages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"387","messages":"388","suppressedMessages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"390","messages":"391","suppressedMessages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"393","messages":"394","suppressedMessages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"396","messages":"397","suppressedMessages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"399","messages":"400","suppressedMessages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"402","messages":"403","suppressedMessages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"405","messages":"406","suppressedMessages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"408","messages":"409","suppressedMessages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"411","messages":"412","suppressedMessages":"413","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414"},{"filePath":"415","messages":"416","suppressedMessages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"418","messages":"419","suppressedMessages":"420","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"421","messages":"422","suppressedMessages":"423","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"424","messages":"425","suppressedMessages":"426","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"427","messages":"428","suppressedMessages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"430","messages":"431","suppressedMessages":"432","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"433","messages":"434","suppressedMessages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"436","messages":"437","suppressedMessages":"438","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"439","messages":"440","suppressedMessages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"442","messages":"443","suppressedMessages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"445","messages":"446","suppressedMessages":"447","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448"},{"filePath":"449","messages":"450","suppressedMessages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"452","messages":"453","suppressedMessages":"454","errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"455"},{"filePath":"456","messages":"457","suppressedMessages":"458","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"459","messages":"460","suppressedMessages":"461","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"462","messages":"463","suppressedMessages":"464","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"465","messages":"466","suppressedMessages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"468","messages":"469","suppressedMessages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"471","messages":"472","suppressedMessages":"473","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"474","messages":"475","suppressedMessages":"476","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"477","messages":"478","suppressedMessages":"479","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"480"},{"filePath":"481","messages":"482","suppressedMessages":"483","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"484","messages":"485","suppressedMessages":"486","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"487","messages":"488","suppressedMessages":"489","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"490","messages":"491","suppressedMessages":"492","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"493","messages":"494","suppressedMessages":"495","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"496","messages":"497","suppressedMessages":"498","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"499","messages":"500","suppressedMessages":"501","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"502","messages":"503","suppressedMessages":"504","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"505","messages":"506","suppressedMessages":"507","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"508","messages":"509","suppressedMessages":"510","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"511","messages":"512","suppressedMessages":"513","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"514"},{"filePath":"515","messages":"516","suppressedMessages":"517","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"518","messages":"519","suppressedMessages":"520","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"521"},{"filePath":"522","messages":"523","suppressedMessages":"524","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"525","messages":"526","suppressedMessages":"527","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"528","messages":"529","suppressedMessages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"531","messages":"532","suppressedMessages":"533","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"534","messages":"535","suppressedMessages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"537","messages":"538","suppressedMessages":"539","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"540","messages":"541","suppressedMessages":"542","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"543","messages":"544","suppressedMessages":"545","errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"546"},{"filePath":"547","messages":"548","suppressedMessages":"549","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"550","messages":"551","suppressedMessages":"552","errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"553"},{"filePath":"554","messages":"555","suppressedMessages":"556","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"557"},{"filePath":"558","messages":"559","suppressedMessages":"560","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"561"},{"filePath":"562","messages":"563","suppressedMessages":"564","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"565"},{"filePath":"566","messages":"567","suppressedMessages":"568","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"569"},{"filePath":"570","messages":"571","suppressedMessages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"573","messages":"574","suppressedMessages":"575","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"576"},{"filePath":"577","messages":"578","suppressedMessages":"579","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"580","messages":"581","suppressedMessages":"582","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"583"},{"filePath":"584","messages":"585","suppressedMessages":"586","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"587","messages":"588","suppressedMessages":"589","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"590"},{"filePath":"591","messages":"592","suppressedMessages":"593","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/project/components/theme-provider.tsx",[],[],"/home/project/components/ui/accordion.tsx",[],[],"/home/project/components/ui/alert-dialog.tsx",[],[],"/home/project/components/ui/alert.tsx",[],[],"/home/project/components/ui/aspect-ratio.tsx",[],[],"/home/project/components/ui/avatar.tsx",[],[],"/home/project/components/ui/badge.tsx",[],[],"/home/project/components/ui/breadcrumb.tsx",[],[],"/home/project/components/ui/button.tsx",[],[],"/home/project/components/ui/calendar.tsx",["594","595"],[],"'use client';\n\nimport * as React from 'react';\nimport { ChevronLeft, ChevronRight } from 'lucide-react';\nimport { DayPicker } from 'react-day-picker';\n\nimport { cn } from '@/lib/utils';\nimport { buttonVariants } from '@/components/ui/button';\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn('p-3', className)}\n      classNames={{\n        months: 'flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0',\n        month: 'space-y-4',\n        caption: 'flex justify-center pt-1 relative items-center',\n        caption_label: 'text-sm font-medium',\n        nav: 'space-x-1 flex items-center',\n        nav_button: cn(\n          buttonVariants({ variant: 'outline' }),\n          'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100'\n        ),\n        nav_button_previous: 'absolute left-1',\n        nav_button_next: 'absolute right-1',\n        table: 'w-full border-collapse space-y-1',\n        head_row: 'flex',\n        head_cell:\n          'text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]',\n        row: 'flex w-full mt-2',\n        cell: 'h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20',\n        day: cn(\n          buttonVariants({ variant: 'ghost' }),\n          'h-9 w-9 p-0 font-normal aria-selected:opacity-100'\n        ),\n        day_range_end: 'day-range-end',\n        day_selected:\n          'bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground',\n        day_today: 'bg-accent text-accent-foreground',\n        day_outside:\n          'day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30',\n        day_disabled: 'text-muted-foreground opacity-50',\n        day_range_middle:\n          'aria-selected:bg-accent aria-selected:text-accent-foreground',\n        day_hidden: 'invisible',\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = 'Calendar';\n\nexport { Calendar };\n","/home/project/components/ui/card.tsx",[],[],"/home/project/components/ui/carousel.tsx",[],[],"/home/project/components/ui/chart.tsx",["596"],[],"'use client';\n\nimport * as React from 'react';\nimport * as RechartsPrimitive from 'recharts';\n\nimport { cn } from '@/lib/utils';\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: '', dark: '.dark' } as const;\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode;\n    icon?: React.ComponentType;\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  );\n};\n\ntype ChartContextProps = {\n  config: ChartConfig;\n};\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null);\n\nfunction useChart() {\n  const context = React.useContext(ChartContext);\n\n  if (!context) {\n    throw new Error('useChart must be used within a <ChartContainer />');\n  }\n\n  return context;\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & {\n    config: ChartConfig;\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >['children'];\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId();\n  const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`;\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  );\n});\nChartContainer.displayName = 'Chart';\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  );\n\n  if (!colorConfig.length) {\n    return null;\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color;\n    return color ? `  --color-${key}: ${color};` : null;\n  })\n  .join('\\n')}\n}\n`\n          )\n          .join('\\n'),\n      }}\n    />\n  );\n};\n\nconst ChartTooltip = RechartsPrimitive.Tooltip;\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<'div'> & {\n      hideLabel?: boolean;\n      hideIndicator?: boolean;\n      indicator?: 'line' | 'dot' | 'dashed';\n      nameKey?: string;\n      labelKey?: string;\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = 'dot',\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart();\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null;\n      }\n\n      const [item] = payload;\n      const key = `${labelKey || item.dataKey || item.name || 'value'}`;\n      const itemConfig = getPayloadConfigFromPayload(config, item, key);\n      const value =\n        !labelKey && typeof label === 'string'\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label;\n\n      if (labelFormatter) {\n        return (\n          <div className={cn('font-medium', labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        );\n      }\n\n      if (!value) {\n        return null;\n      }\n\n      return <div className={cn('font-medium', labelClassName)}>{value}</div>;\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ]);\n\n    if (!active || !payload?.length) {\n      return null;\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== 'dot';\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl',\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || 'value'}`;\n            const itemConfig = getPayloadConfigFromPayload(config, item, key);\n            const indicatorColor = color || item.payload.fill || item.color;\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  'flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground',\n                  indicator === 'dot' && 'items-center'\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            'shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]',\n                            {\n                              'h-2.5 w-2.5': indicator === 'dot',\n                              'w-1': indicator === 'line',\n                              'w-0 border-[1.5px] border-dashed bg-transparent':\n                                indicator === 'dashed',\n                              'my-0.5': nestLabel && indicator === 'dashed',\n                            }\n                          )}\n                          style={\n                            {\n                              '--color-bg': indicatorColor,\n                              '--color-border': indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        'flex flex-1 justify-between leading-none',\n                        nestLabel ? 'items-end' : 'items-center'\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n);\nChartTooltipContent.displayName = 'ChartTooltip';\n\nconst ChartLegend = RechartsPrimitive.Legend;\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> &\n    Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {\n      hideIcon?: boolean;\n      nameKey?: string;\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = 'bottom', nameKey },\n    ref\n  ) => {\n    const { config } = useChart();\n\n    if (!payload?.length) {\n      return null;\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'flex items-center justify-center gap-4',\n          verticalAlign === 'top' ? 'pb-3' : 'pt-3',\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || 'value'}`;\n          const itemConfig = getPayloadConfigFromPayload(config, item, key);\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                'flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground'\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n);\nChartLegendContent.displayName = 'ChartLegend';\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== 'object' || payload === null) {\n    return undefined;\n  }\n\n  const payloadPayload =\n    'payload' in payload &&\n    typeof payload.payload === 'object' &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined;\n\n  let configLabelKey: string = key;\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === 'string'\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string;\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string;\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config];\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n};\n","/home/project/components/ui/checkbox.tsx",[],[],"/home/project/components/ui/collapsible.tsx",[],[],"/home/project/components/ui/command.tsx",[],[],"/home/project/components/ui/context-menu.tsx",[],[],"/home/project/components/ui/dialog.tsx",[],[],"/home/project/components/ui/drawer.tsx",[],[],"/home/project/components/ui/dropdown-menu.tsx",[],[],"/home/project/components/ui/form.tsx",[],[],"/home/project/components/ui/hover-card.tsx",[],[],"/home/project/components/ui/input-otp.tsx",[],[],"/home/project/components/ui/input.tsx",[],[],"/home/project/components/ui/label.tsx",[],[],"/home/project/components/ui/menubar.tsx",[],[],"/home/project/components/ui/navigation-menu.tsx",[],[],"/home/project/components/ui/pagination.tsx",[],[],"/home/project/components/ui/popover.tsx",[],[],"/home/project/components/ui/progress.tsx",[],[],"/home/project/components/ui/radio-group.tsx",[],[],"/home/project/components/ui/resizable.tsx",[],[],"/home/project/components/ui/scroll-area.tsx",[],[],"/home/project/components/ui/select.tsx",[],[],"/home/project/components/ui/separator.tsx",[],[],"/home/project/components/ui/sheet.tsx",[],[],"/home/project/components/ui/skeleton.tsx",[],[],"/home/project/components/ui/slider.tsx",[],[],"/home/project/components/ui/sonner.tsx",[],[],"/home/project/components/ui/switch.tsx",[],[],"/home/project/components/ui/table.tsx",[],[],"/home/project/components/ui/tabs.tsx",[],[],"/home/project/components/ui/textarea.tsx",[],[],"/home/project/components/ui/toast.tsx",[],[],"/home/project/components/ui/toaster.tsx",[],[],"/home/project/components/ui/toggle-group.tsx",[],[],"/home/project/components/ui/toggle.tsx",[],[],"/home/project/components/ui/tooltip.tsx",[],[],"/home/project/lib/utils.ts",[],[],"/home/project/src/App.tsx",[],[],"/home/project/src/components/auth/protected-route.tsx",[],[],"/home/project/src/components/charts/trend-chart.tsx",[],[],"/home/project/src/components/data-display/stat-card.tsx",[],[],"/home/project/src/components/data-table/columns.tsx",[],[],"/home/project/src/components/data-table/data-table-column-header.tsx",[],[],"/home/project/src/components/data-table/data-table-pagination.tsx",[],[],"/home/project/src/components/data-table/data-table-row-actions.tsx",[],[],"/home/project/src/components/data-table/data-table-toolbar.tsx",[],[],"/home/project/src/components/data-table/data-table-view-options.tsx",[],[],"/home/project/src/components/data-table/data-table.tsx",["597","598","599","600"],[],"import * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFacetedRowModel,\n  getFacetedUniqueValues,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\";\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n\nimport { DataTablePagination } from \"./data-table-pagination\";\nimport { DataTableToolbar } from \"./data-table-toolbar\";\nimport { supabase } from '@/lib/supabase';\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[];\n  data: TData[];\n  onRefresh?: () => Promise<void>;\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n  onRefresh,\n}: DataTableProps<TData, TValue>) {\n  const [rowSelection, setRowSelection] = React.useState({});\n  const [columnVisibility, setColumnVisibility] =\n    React.useState<VisibilityState>({});\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  );\n  const [sorting, setSorting] = React.useState<SortingState>([]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      sorting,\n      columnVisibility,\n      rowSelection,\n      columnFilters,\n    },\n    enableRowSelection: true,\n    onRowSelectionChange: setRowSelection,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFacetedRowModel: getFacetedRowModel(),\n    getFacetedUniqueValues: getFacetedUniqueValues(),\n  });\n\n  return (\n    <div className=\"space-y-4\">\n      <DataTableToolbar table={table} onRefresh={onRefresh} />\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id} colSpan={header.colSpan}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </TableHead>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() && \"selected\"}\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(\n                        cell.column.columnDef.cell === columns[columns.length - 1].cell\n                          ? (props: any) => columns[columns.length - 1].cell!({ ...props, onRefresh })\n                          : cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  colSpan={columns.length}\n                  className=\"h-24 text-center\"\n                >\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <DataTablePagination table={table} />\n    </div>\n  );\n}","/home/project/src/components/feedback/loading-spinner.tsx",[],[],"/home/project/src/components/forms/asin-input.tsx",[],[],"/home/project/src/components/forms/form-section.tsx",[],[],"/home/project/src/components/layout/container.tsx",[],[],"/home/project/src/components/layout/dashboard-layout.tsx",[],[],"/home/project/src/components/layout/section.tsx",[],[],"/home/project/src/components/layout/sidebar.tsx",[],[],"/home/project/src/components/reviews/case-template-dialog.tsx",[],[],"/home/project/src/components/reviews/product-header.tsx",[],[],"/home/project/src/components/reviews/product-info.tsx",[],[],"/home/project/src/components/reviews/review-list.tsx",["601","602"],[],"import { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Button } from '@/components/ui/button';\nimport { CaseTemplateDialog } from './case-template-dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { Star, Calendar, CheckCircle, AlertTriangle, AlertCircle, Ban, Shield } from 'lucide-react';\nimport { formatDate } from '@/lib/utils';\n\ninterface ReviewListProps {\n  reviews: Array<{\n    review_id: string;\n    asin: string;\n    title: string;\n    content: string;\n    rating: number;\n    review_date: string;\n    verified_purchase: boolean;\n    helpful_votes: number;\n    variant?: string;\n    reviewUrl?: string;\n  }>;\n  violations?: Record<string, {\n    violations: Array<{\n      type: string;\n      category: string;\n      severity: string;\n      userBenefit: string;\n      action: string;\n      details: string;\n    }>;\n    scanned_at: string;\n    overridden?: boolean;\n    overridden_by?: string;\n    overridden_at?: string;\n  }>;\n}\n\nexport function ReviewList({ reviews, violations = {} }: ReviewListProps) {\n  const [reviewsPerPage, setReviewsPerPage] = useState(10);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [ratingFilter, setRatingFilter] = useState<string>('all');\n  const [showViolations, setShowViolations] = useState(false);\n\n  // Filter reviews based on rating and violations\n  const filteredReviews = reviews.filter(review => {\n    // First apply rating filter\n    if (ratingFilter !== 'all') {\n      const rating = parseInt(ratingFilter);\n      if (review.rating !== rating) return false;\n    }\n\n    // Then apply violations filter\n    if (showViolations && violations) {\n      return violations[review.review_id]?.violations?.length > 0;\n    }\n\n    return true;\n  });\n\n  const getViolationIcon = (type: string) => {\n    switch (type) {\n      case 'Content Violation':\n        return <AlertTriangle className=\"h-4 w-4\" />;\n      default:\n        return <AlertCircle className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Customer Reviews</CardTitle>\n          <div className=\"flex items-center gap-4\">\n            <Select\n              value={ratingFilter}\n              onValueChange={setRatingFilter}\n            >\n              <SelectTrigger className=\"w-[140px]\">\n                <SelectValue placeholder=\"Filter by rating\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Ratings</SelectItem>\n                <SelectItem value=\"1\">1 Star</SelectItem>\n                <SelectItem value=\"2\">2 Stars</SelectItem>\n                <SelectItem value=\"3\">3 Stars</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowViolations(!showViolations)}\n              className={showViolations ? 'bg-red-100 hover:bg-red-200 border-red-200' : ''}\n            >\n              {showViolations ? 'Show All Reviews' : 'Show Violations Only'}\n            </Button>\n            <Select\n              value={reviewsPerPage.toString()}\n              onValueChange={(value) => {\n                setReviewsPerPage(parseInt(value));\n                setCurrentPage(1);\n              }}\n            >\n              <SelectTrigger className=\"w-[140px]\">\n                <SelectValue placeholder=\"Reviews per page\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"10\">10 per page</SelectItem>\n                <SelectItem value=\"25\">25 per page</SelectItem>\n                <SelectItem value=\"50\">50 per page</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {filteredReviews.length > 0 ? (\n            <>\n              {filteredReviews\n                .slice((currentPage - 1) * reviewsPerPage, currentPage * reviewsPerPage)\n                .map((review) => (\n                  <div\n                    key={review.review_id}\n                    className={`border-b last:border-0 pb-6 last:pb-0 pt-6 first:pt-0 space-y-3 ${\n                      violations[review.review_id]?.violations?.length ? 'bg-red-50/10' : ''\n                    }`}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"flex\">\n                          {Array.from({ length: 5 }).map((_, i) => (\n                            <Star\n                              key={i}\n                              className={`h-4 w-4 ${\n                                i < review.rating\n                                  ? 'fill-primary text-primary'\n                                  : 'fill-muted text-muted'\n                              }`}\n                            />\n                          ))}\n                        </div>\n                        <h4 className=\"font-medium\">{review.title || 'Review'}</h4>\n                      </div>\n                      <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                        {review.variant && (\n                          <Badge variant=\"outline\">\n                            {review.variant}\n                          </Badge>\n                        )}\n                        <div className=\"flex items-center gap-1\">\n                          <Calendar className=\"h-4 w-4\" />\n                          {formatDate(review.review_date)}\n                        </div>\n                        {review.verified_purchase && (\n                          <Badge variant=\"success\">Verified Purchase</Badge>\n                        )}\n                        {violations && violations[review.review_id]?.violations?.length > 0 && (\n                          <Badge variant=\"destructive\">\n                            {violations[review.review_id].violations.length} Violation{violations[review.review_id].violations.length > 1 ? 's' : ''}\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        {review.helpful_votes > 0 && (\n                          <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                            <span>👍</span>\n                            <span>{review.helpful_votes.toLocaleString()}</span>\n                          </Badge>\n                        )}\n                        <a\n                          href={`https://www.amazon.com/gp/customer-reviews/${review.review_id}`}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          className=\"text-sm text-primary hover:underline\"\n                        >\n                          View on Amazon →\n                        </a>\n                        {/* Keep existing reviewUrl link if present */}\n                        {review.reviewUrl && review.reviewUrl !== `https://www.amazon.com/gp/customer-reviews/${review.review_id}` && (\n                          <a\n                            href={review.reviewUrl}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"text-sm text-primary hover:underline\"\n                          >\n                            Alternate Link →\n                          </a>\n                        )}\n                      </div>\n                    </div>\n                    <p className=\"text-sm whitespace-pre-wrap\">{review.content}</p>\n                    {violations && violations[review.review_id]?.violations?.length > 0 && (\n                      <div className=\"mt-4 p-4 bg-red-50/50 rounded-md border border-red-100\">\n                        <h5 className=\"font-medium text-red-600 mb-2\">Review Violations</h5>\n                        <div className=\"space-y-2\">\n                          {violations[review.review_id].violations.map((violation, index) => {\n                            const isOverridden = violations[review.review_id].overridden;\n                            return (\n                              <div key={index} className=\"text-sm space-y-2 p-3 bg-background rounded-md\">\n                                <div className=\"flex flex-wrap items-center gap-2\">\n                                  <Badge\n                                    variant={isOverridden ? 'outline' : 'destructive'}\n                                    className=\"flex items-center gap-1\"\n                                  >\n                                    {getViolationIcon(violation.type)}\n                                    {violation.type}\n                                  </Badge>\n                                  <Badge variant=\"secondary\">\n                                    Category: {violation.category}\n                                  </Badge>\n                                  <Badge \n                                    variant={\n                                      violation.severity === 'Critical' ? 'destructive' :\n                                      violation.severity === 'High' ? 'destructive' :\n                                      violation.severity === 'Medium' ? 'warning' :\n                                      'secondary'\n                                    }\n                                  >\n                                    Severity: {violation.severity}\n                                  </Badge>\n                                </div>\n                                <div className=\"flex justify-end mt-2\">\n                                  <CaseTemplateDialog\n                                    asin={review.asin}\n                                    reviewId={review.review_id}\n                                    review={{\n                                      title: review.title,\n                                      content: review.content\n                                    }}\n                                    violation={{\n                                      type: violation.type,\n                                      category: violation.category,\n                                      details: violation.details\n                                    }}\n                                  />\n                                </div>\n                                {violation.details && (\n                                  <div className=\"mt-2\">\n                                    <p className=\"text-sm font-medium mb-1\">Details:</p>\n                                    <p className=\"text-sm text-muted-foreground\">{violation.details}</p>\n                                  </div>\n                                )}\n                              </div>\n                            );\n                          })}\n                          {violations[review.review_id].overridden && (\n                            <div className=\"mt-2 text-sm text-muted-foreground flex items-center gap-1\">\n                              <CheckCircle className=\"h-3 w-3 text-green-500\" />\n                              <span>\n                                Overridden by {violations[review.review_id].overridden_by} on{' '}\n                                {formatDate(violations[review.review_id].overridden_at)}\n                              </span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              {/* Pagination */}\n              <div className=\"flex items-center justify-between mt-6\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Showing {Math.min((currentPage - 1) * reviewsPerPage + 1, filteredReviews.length)} to{' '}\n                  {Math.min(currentPage * reviewsPerPage, filteredReviews.length)} of{' '}\n                  {filteredReviews.length} reviews\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(p => Math.max(1, p - 1))}\n                    disabled={currentPage === 1}\n                  >\n                    Previous\n                  </Button>\n                  <div className=\"text-sm\">\n                    Page {currentPage} of {Math.ceil(filteredReviews.length / reviewsPerPage)}\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(p => Math.min(Math.ceil(filteredReviews.length / reviewsPerPage), p + 1))}\n                    disabled={currentPage >= Math.ceil(filteredReviews.length / reviewsPerPage)}\n                  >\n                    Next\n                  </Button>\n                </div>\n              </div>\n            </>\n          ) : (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No reviews match the current filters\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","/home/project/src/components/reviews/review-stats.tsx",[],[],"/home/project/src/components/reviews/violation-scanner.tsx",["603","604","605","606","607","608","609","610"],[],"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { LoadingSpinner } from '@/components/feedback/loading-spinner';\nimport { useToast } from '@/hooks/use-toast';\nimport { config } from '@/lib/config';\nimport { supabase } from '@/lib/supabase';\nimport { AlertTriangle, CheckCircle, AlertCircle, Ban, Shield } from 'lucide-react';\n\ninterface ViolationType {\n  type: string;\n  severity: 'High' | 'Medium' | 'Low';\n  userBenefit: 'High' | 'Medium' | 'Low';\n  action: 'Remove' | 'Edit' | 'Keep';\n  details: string;\n}\n\ninterface ReviewViolation {\n  reviewId: string;\n  violations: ViolationType[];\n  scannedAt: string;\n  overridden?: boolean;\n  overriddenBy?: string;\n  overriddenAt?: string;\n}\n\ninterface ViolationScannerProps {\n  reviews: any[];\n  onScanComplete?: (violations: Record<string, ReviewViolation>) => void;\n}\n\nconst MAX_RETRIES = 3;\nconst RETRY_DELAY = 5000; // 5 second base delay\nconst SCAN_TIMEOUT = 15 * 60 * 1000; // 15 minutes\nconst PROGRESS_INTERVAL = 10000; // 10 seconds\n\nexport function ViolationScanner({ reviews, onScanComplete }: ViolationScannerProps) {\n  const [isScanning, setIsScanning] = useState(false);\n  const [shouldStop, setShouldStop] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [timeoutId, setTimeoutId] = useState<NodeJS.Timeout | null>(null);\n  const [progressIntervalId, setProgressIntervalId] = useState<NodeJS.Timeout | null>(null);\n  const [violations, setViolations] = useState<Record<string, ReviewViolation>>({});\n  const [scanStats, setScanStats] = useState({\n    totalScanned: 0,\n    violationsFound: 0,\n    byType: {\n      inappropriate: 0,\n      spam: 0,\n      fake: 0,\n      policy: 0\n    }\n  });\n  \n  // Subscribe to violation updates\n  useEffect(() => {\n    const channel = supabase\n      .channel('review_violations')\n      .on(\n        'postgres_changes',\n        {\n          event: 'INSERT',\n          schema: 'public',\n          table: 'review_violations'\n        },\n        (payload) => {\n          // Update local state when new violations are added\n          const violation = payload.new;\n          setViolations(prev => ({\n            ...prev,\n            [violation.review_id]: {\n              reviewId: violation.review_id,\n              violations: violation.violations,\n              scannedAt: violation.scanned_at,\n              overridden: violation.overridden,\n              overriddenBy: violation.overridden_by,\n              overriddenAt: violation.overridden_at\n            }\n          }));\n\n          // Update scan stats\n          setScanStats(prev => ({\n            ...prev,\n            violationsFound: prev.violationsFound + 1,\n            byType: {\n              ...prev.byType,\n              [violation.violation_type?.toLowerCase() || 'policy']: \n                (prev.byType[violation.violation_type?.toLowerCase() || 'policy'] || 0) + 1\n            }\n          }));\n        }\n      )\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, []);\n  const { toast } = useToast();\n\n  const processReviews = async (reviews: any[]) => {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), SCAN_TIMEOUT);\n\n      // Filter out invalid reviews\n      const validReviews = reviews.filter(review => {\n        if (!review.review_id || (!review.content && !review.text)) {\n          console.warn('Skipping invalid review data:', review);\n          return false;\n        }\n        const reviewContent = review.content || review.text;\n        if (!reviewContent.trim()) {\n          console.warn('Skipping empty review content:', review.review_id);\n          return false;\n        }\n        return true;\n      });\n\n      // Prepare all review data\n      const reviewsData = validReviews.map(review => ({\n        id: review.review_id,\n        content: review.content || review.text,\n        rating: review.rating,\n        date: review.review_date || review.date,\n        author: review.author,\n        verified: review.verified_purchase || review.verified,\n        product_id: review.product_id,\n        title: review.title,\n        helpful_votes: review.helpful_votes || 0,\n        total_votes: review.total_votes || 0,\n        variant: review.variant\n      }));\n\n      // Add retry logic\n      let attempts = 0;\n      const maxAttempts = 3;\n      const baseDelay = 1000; // 1 second\n\n      while (attempts < maxAttempts) {\n        try {\n          const response = await fetch(config.services.n8n.webhookUrl, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify({ reviews: reviewsData }),\n            signal: controller.signal\n          });\n\n          if (!response.ok) {\n            throw new Error(`HTTP ${response.status}`);\n          }\n\n          const responseText = await response.text();\n          if (!responseText.trim()) {\n            throw new Error('Empty response');\n          }\n\n          try {\n            const data = JSON.parse(responseText);\n            // Handle both single object and array responses\n            if (!data) {\n              throw new Error('Invalid response');\n            }\n            \n            // If response is a single object with violations\n            if (data.violations) {\n              return [{\n                reviewId: reviewsData[0].id,\n                violations: data.violations,\n                scannedAt: new Date().toISOString()\n              }];\n            }\n            \n            // If response is an array of results\n            if (Array.isArray(data.results)) {\n              return data.results.map((result: any) => ({\n                reviewId: result.reviewId,\n                violations: result.violations,\n                scannedAt: new Date().toISOString()\n              }));\n            }\n            \n            // If response has a different structure\n            return reviewsData.map(review => ({\n              reviewId: review.id,\n              violations: data[review.id]?.violations || [],\n              reviewId: result.reviewId,\n              violations: result.violations,\n              scannedAt: new Date().toISOString()\n            }));\n          } catch (parseError) {\n            console.error('Parse error:', parseError, 'Response:', responseText);\n            throw new Error(`Parse error: ${parseError.message}`);\n          }\n        } catch (error) {\n          attempts++;\n          if (attempts === maxAttempts) {\n            console.error('Max retry attempts reached:', error);\n            console.error('Last response:', error.response?.text);\n            throw error;\n          }\n          // Exponential backoff\n          await new Promise(resolve => \n            setTimeout(resolve, baseDelay * Math.pow(2, attempts - 1))\n          );\n        }\n      }\n    } catch (error) {\n      console.error('Error processing reviews:', error);\n      return null;\n    }\n  };\n\n  const scanReviews = async () => {\n    setShouldStop(false);\n    \n    // Clear any existing intervals/timeouts\n    if (timeoutId) clearTimeout(timeoutId);\n    if (progressIntervalId) clearInterval(progressIntervalId);\n\n    if (!config.services.n8n.webhookUrl) {\n      toast({\n        title: 'Configuration Error',\n        description: 'Review scanning service URL is not configured',\n        variant: 'destructive'\n      });\n      return;\n    }\n    \n    try {\n      setIsScanning(true);\n      setProgress(0);\n      let processedCount = 0;\n      \n      // Start progress simulation\n      const startTime = Date.now();\n      const intervalId = setInterval(() => {\n        const elapsed = Date.now() - startTime;\n        // Simulate progress up to 95% over 10 minutes\n        const simulatedProgress = Math.min(95, (elapsed / (10 * 60 * 1000)) * 100);\n        setProgress(simulatedProgress);\n      }, PROGRESS_INTERVAL);\n      setProgressIntervalId(intervalId);\n\n      // Set overall timeout\n      const timeout = setTimeout(() => {\n        setIsScanning(false);\n        clearInterval(intervalId);\n        toast({\n          title: 'Scan Timeout',\n          description: 'The scan took too long and was cancelled',\n          variant: 'destructive'\n        });\n      }, SCAN_TIMEOUT);\n      setTimeoutId(timeout);\n\n      if (shouldStop) {\n        clearInterval(intervalId);\n        clearTimeout(timeout);\n        setIsScanning(false);\n        setProgress(0);\n        toast({\n          title: 'Scan Stopped',\n          description: 'Review scanning was stopped manually'\n        });\n        return;\n      }\n\n      // Process all reviews in a single request\n      toast({\n        title: 'Processing Started',\n        description: 'Processing reviews through violation detection service...'\n      });\n\n      const results = await processReviews(reviews);\n      \n      if (!results || !Array.isArray(results)) {\n        throw new Error('Invalid response format from violation detection service');\n      }\n\n      const allViolations: Record<string, ReviewViolation> = {};\n\n      // Process results and store in Supabase\n      for (const violation of results) {\n        if (violation) {\n          allViolations[violation.reviewId] = violation;\n          \n          // Store violation in Supabase\n          try {\n            await supabase\n              .from('review_violations')\n              .insert({\n                review_id: violation.reviewId,\n                product_id: reviews[0].product_id,\n                violations: violation.violations,\n                scanned_at: violation.scannedAt,\n                parsed_output: violation.details || null,\n                violation_type: violation.violations[0]?.type || null,\n                severity: violation.violations[0]?.severity || null,\n                user_benefit: violation.violations[0]?.userBenefit || null,\n                action: violation.violations[0]?.action || null,\n                details: violation.violations[0]?.details || null\n              });\n          } catch (error) {\n            console.error('Failed to store violation:', error);\n          }\n        }\n      }\n\n      if (!results || results.length === 0) {\n        throw new Error('No results returned from violation detection service');\n      }\n\n      setProgress(100);\n\n      // Update violations state\n      setViolations(allViolations);\n      \n      // Update scan stats\n      const stats = {\n        totalScanned: reviews.length,\n        violationsFound: Object.keys(allViolations).length,\n        byType: {\n          inappropriate: 0,\n          spam: 0,\n          fake: 0,\n          policy: 0\n        }\n      };\n      \n      // Count violations by type\n      Object.values(allViolations).forEach((violation) => {\n        violation.violations.forEach((v) => {\n          if (stats.byType[v.type as keyof typeof stats.byType] !== undefined) {\n            stats.byType[v.type as keyof typeof stats.byType]++;\n          }\n        });\n      });\n      \n      setScanStats(stats);\n      \n      // Call onScanComplete callback with violations\n      if (onScanComplete) {\n        onScanComplete(allViolations);\n      }\n\n      toast({\n        title: 'Scan Complete',\n        description: `Found ${Object.keys(allViolations).length} violations in ${reviews.length} reviews.`,\n      });\n\n    } catch (error) {\n      // Clear intervals/timeouts on error\n      if (progressIntervalId) clearInterval(progressIntervalId);\n      if (timeoutId) clearTimeout(timeoutId);\n\n      if (error.name === 'AbortError') {\n        throw new Error('Request timed out after 15 minutes');\n      }\n      console.error('Scan error:', error);\n      toast({\n        title: 'Error',\n        description: error instanceof Error \n          ? `Failed to scan reviews: ${error.message}`\n          : 'Failed to scan reviews',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsScanning(false);\n      if (progressIntervalId) clearInterval(progressIntervalId);\n      if (timeoutId) clearTimeout(timeoutId);\n      setProgress(100);\n    }\n  };\n\n  const getViolationIcon = (type: string) => {\n    switch (type) {\n      case 'Pricing/Availability Keywords':\n      case 'Price Manipulation':\n        return <Ban className=\"h-4 w-4 text-red-500\" />;\n      case 'Spam Content':\n      case 'Promotional Content':\n        return <AlertCircle className=\"h-4 w-4 text-yellow-500\" />;\n      case 'Fake Review':\n      case 'Inauthentic Review':\n        return <AlertTriangle className=\"h-4 w-4 text-orange-500\" />;\n      case 'Policy Violation':\n      case 'Terms of Service Violation':\n        return <Shield className=\"h-4 w-4 text-blue-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity.toLowerCase()) {\n      case 'high':\n        return 'text-red-500';\n      case 'medium':\n        return 'text-yellow-500';\n      case 'low':\n        return 'text-green-500';\n      default:\n        return 'text-muted-foreground';\n    }\n  };\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2 w-[200px]\">\n          {isScanning ? (\n            <Button\n              variant=\"destructive\"\n              onClick={() => setShouldStop(true)}\n              className=\"w-full\"\n            >\n              <LoadingSpinner className=\"mr-2\" size=\"sm\" />\n              Stop Scanning\n            </Button>\n          ) : (\n            <Button\n              onClick={scanReviews}\n              disabled={reviews.length === 0}\n              className=\"w-full\"\n            >\n              <Shield className=\"mr-2 h-4 w-4\" />\n              Scan Reviews\n            </Button>\n          )}\n        </div>\n\n        {scanStats.totalScanned > 0 && (\n          <div className=\"text-sm text-muted-foreground\">\n            Last scan: {scanStats.violationsFound} violations found in {scanStats.totalScanned} reviews\n          </div>\n        )}\n      </div>\n\n      {isScanning && (\n        <div className=\"space-y-2\">\n          <Progress value={progress} className=\"h-2\" />\n          <p className=\"text-sm text-muted-foreground text-center\">\n            Processing reviews... {Math.round(progress)}% complete\n          </p>\n        </div>\n      )}\n\n      {scanStats.violationsFound > 0 && (\n        <div className=\"grid gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Scan Results</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-4 gap-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <Ban className=\"h-4 w-4 text-red-500\" />\n                    <span className=\"text-sm font-medium\">Inappropriate</span>\n                  </div>\n                  <p className=\"text-2xl font-bold\">{scanStats.byType.inappropriate}</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <AlertCircle className=\"h-4 w-4 text-yellow-500\" />\n                    <span className=\"text-sm font-medium\">Spam</span>\n                  </div>\n                  <p className=\"text-2xl font-bold\">{scanStats.byType.spam}</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <AlertTriangle className=\"h-4 w-4 text-orange-500\" />\n                    <span className=\"text-sm font-medium\">Fake</span>\n                  </div>\n                  <p className=\"text-2xl font-bold\">{scanStats.byType.fake}</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <Shield className=\"h-4 w-4 text-blue-500\" />\n                    <span className=\"text-sm font-medium\">Policy</span>\n                  </div>\n                  <p className=\"text-2xl font-bold\">{scanStats.byType.policy}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"space-y-4\">\n            {Object.values(violations).map((violation) => (\n              <Card key={violation.reviewId} className=\"relative overflow-hidden\">\n                {!violation.overridden && (\n                  <div className=\"absolute top-0 left-0 w-1 h-full bg-red-500\" />\n                )}\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"space-y-1\">\n                      <div className=\"flex items-center gap-2\">\n                        {violation.violations.map((v, i) => (\n                          <div key={i} className=\"space-y-2\">\n                            <Badge\n                              variant={violation.overridden ? 'outline' : 'destructive'}\n                              className=\"flex items-center gap-1\"\n                            >\n                              {getViolationIcon(v.type)}\n                              {v.type}\n                            </Badge>\n                            <div className=\"flex items-center gap-2 text-xs\">\n                              <span className={getSeverityColor(v.severity)}>\n                                Severity: {v.severity}\n                              </span>\n                              <span className=\"text-muted-foreground\">•</span>\n                              <span className={getSeverityColor(v.userBenefit)}>\n                                User Benefit: {v.userBenefit}\n                              </span>\n                              <span className=\"text-muted-foreground\">•</span>\n                              <span>Action: {v.action}</span>\n                            </div>\n                            {v.details && (\n                              <p className=\"text-sm text-muted-foreground mt-2\">\n                                {v.details}\n                              </p>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {violation.overridden ? (\n                          <span className=\"flex items-center gap-1\">\n                            <CheckCircle className=\"h-3 w-3 text-green-500\" />\n                            Overridden by {violation.overriddenBy} on{' '}\n                            {new Date(violation.overriddenAt!).toLocaleDateString()}\n                          </span>\n                        ) : (\n                          `Detected on ${new Date(violation.scannedAt).toLocaleDateString()}`\n                        )}\n                      </p>\n                    </div>\n                    {!violation.overridden && (\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          // Handle override\n                          const updatedViolations = {\n                            ...violations,\n                            [violation.reviewId]: {\n                              ...violation,\n                              overridden: true,\n                              overriddenBy: 'Admin', // Replace with actual user\n                              overriddenAt: new Date().toISOString()\n                            }\n                          };\n                          setViolations(updatedViolations);\n                          if (onScanComplete) {\n                            onScanComplete(updatedViolations);\n                          }\n                        }}\n                      >\n                        Override\n                      </Button>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","/home/project/src/components/theme-provider.tsx",[],[],"/home/project/src/components/typography.tsx",[],[],"/home/project/src/components/ui/avatar.tsx",[],[],"/home/project/src/components/ui/badge.tsx",[],[],"/home/project/src/components/ui/button.tsx",[],[],"/home/project/src/components/ui/card.tsx",[],[],"/home/project/src/components/ui/checkbox.tsx",[],[],"/home/project/src/components/ui/collapsible.tsx",["611"],[],"import * as React from \"react\"\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport {\n  Collapsible,\n  CollapsibleTrigger,\n  CollapsibleContent\n}","/home/project/src/components/ui/dialog.tsx",[],[],"/home/project/src/components/ui/dropdown-menu.tsx",[],[],"/home/project/src/components/ui/input.tsx",[],[],"/home/project/src/components/ui/label.tsx",[],[],"/home/project/src/components/ui/progress.tsx",[],[],"/home/project/src/components/ui/select.tsx",[],[],"/home/project/src/components/ui/switch.tsx",[],[],"/home/project/src/components/ui/table.tsx",[],[],"/home/project/src/components/ui/tabs.tsx",[],[],"/home/project/src/components/ui/textarea.tsx",[],[],"/home/project/src/contexts/auth-context.tsx",["612","613","614","615"],[],"import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { Session, User, AuthError } from '@supabase/supabase-js';\nimport { supabase } from '@/lib/supabase';\nimport { LoadingSpinner } from '@/components/feedback/loading-spinner';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface AuthState {\n  session: Session | null;\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  error: AuthError | null;\n  signIn: (email: string, password: string) => Promise<void>;\n  signUp: (email: string, password: string) => Promise<{ error: any; data: any }>;\n  signOut: () => Promise<void>;\n  updateProfile: (data: { full_name?: string; avatar_url?: string; bio?: string; location?: string }) => Promise<void>;\n  resetPasswordRequest: (email: string) => Promise<void>;\n  resetPassword: (newPassword: string) => Promise<void>;\n}\n\nexport const AuthContext = createContext<AuthState | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [session, setSession] = useState<Session | null>(null);\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<AuthError | null>(null);\n  const { toast } = useToast();\n\n  const clearAuthState = async () => {\n    // Clear Supabase session storage\n    localStorage.removeItem('sb-' + new URL(supabase.supabaseUrl).hostname + '-auth-token');\n    \n    // Clear state\n    setSession(null);\n    setUser(null);\n    setIsLoading(false);\n    setError(null);\n  };\n\n  useEffect(() => {\n    let mounted = true;\n\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      if (mounted) {\n        setSession(session);\n        setUser(session?.user ?? null);\n        setIsLoading(false);\n      }\n    });\n\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        if (!mounted) return;\n\n        if (event === 'SIGNED_OUT') {\n          await clearAuthState();\n          return;\n        }\n\n        if (mounted) {\n          setSession(session);\n          setUser(session?.user ?? null);\n          setIsLoading(false);\n        }\n      }\n    );\n\n    return () => {\n      mounted = false;\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      setError(null);\n      setIsLoading(true);\n      \n      const { error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n      \n      if (error) throw error;\n      \n      // Get the session after successful sign in\n      const { data: { session } } = await supabase.auth.getSession();\n      if (session) {\n        setSession(session);\n        setUser(session.user);\n      }\n      \n    } catch (err) {\n      console.error('Sign in error:', err);\n      setError(err as AuthError);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const signUp = async (email: string, password: string) => {\n    try {\n      setError(null);\n      setIsLoading(true);\n      \n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n      });\n      \n      if (error) throw error;\n\n      return { error: null, data };\n    } catch (err) {\n      console.error('Sign up error:', err);\n      setError(err as AuthError);\n      return { error: err, data: null };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      setError(null);\n      \n      // First clear local state and storage\n      await clearAuthState();\n      \n      // Then sign out from Supabase\n      const { error } = await supabase.auth.signOut();\n\n      if (error) throw error;\n      \n    } catch (err) {\n      console.error('Error signing out:', err);\n      setError(err as AuthError);\n      throw err;\n    }\n  };\n\n  const updateProfile = async (data: {\n    full_name?: string;\n    avatar_url?: string;\n    bio?: string;\n    location?: string;\n  }) => {\n    try {\n      setError(null);\n      if (!user) throw new Error('No user logged in');\n      \n      const userData = {\n        id: user.id,\n        email: user.email,\n        full_name: data.full_name,\n        bio: data.bio,\n        location: data.location\n      };\n\n      const { data: updatedProfile, error: profileError } = await supabase\n        .from('users')\n        .upsert(userData, {\n          onConflict: 'id',\n          returning: 'representation'\n        });\n\n      if (profileError) {\n        throw profileError;\n      }\n\n      // Update the user metadata in auth\n      const { data: { user: updatedUser }, error: updateError } = await supabase.auth.updateUser({\n        data: {\n          full_name: data.full_name,\n          bio: data.bio,\n          location: data.location\n        }\n      });\n\n      if (updateError) {\n        throw updateError;\n      }\n\n      // Update local user state\n      if (updatedUser) {\n        setUser(updatedUser);\n      }\n\n      toast({\n        title: 'Profile updated',\n        description: 'Your profile has been updated successfully.',\n      });\n      \n      return;\n    } catch (err) {\n      toast({\n        title: 'Error',\n        description: err instanceof Error ? err.message : 'Failed to update profile',\n        variant: 'destructive',\n      });\n      throw err;\n    }\n  };\n\n  const resetPasswordRequest = async (email: string) => {\n    try {\n      setError(null);\n      const { error } = await supabase.auth.resetPasswordForEmail(email);\n      if (error) throw error;\n    } catch (err) {\n      setError(err as AuthError);\n      throw err;\n    }\n  };\n\n  const resetPassword = async (newPassword: string) => {\n    try {\n      setError(null);\n      const { error } = await supabase.auth.updateUser({\n        password: newPassword,\n      });\n      if (error) throw error;\n    } catch (err) {\n      setError(err as AuthError);\n      throw err;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{\n        session,\n        user,\n        isLoading,\n        isAuthenticated: !!session,\n        error,\n        signIn,\n        signUp,\n        signOut,\n        updateProfile,\n        resetPasswordRequest,\n        resetPassword,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}","/home/project/src/hooks/use-auth.ts",[],[],"/home/project/src/hooks/use-toast.ts",["616"],[],"import { toast as sonnerToast, type Toast } from 'sonner';\n\ntype ToastProps = {\n  title?: string;\n  description?: string;\n  variant?: 'default' | 'destructive';\n};\n\nexport function useToast() {\n  const toast = ({ title, description, variant = 'default' }: ToastProps) => {\n    const toastFn = variant === 'destructive' ? sonnerToast.error : sonnerToast;\n\n    return toastFn(title, {\n      description,\n    });\n  };\n\n  return {\n    toast,\n  };\n}","/home/project/src/lib/apify-review-scraper.ts",[],[],"/home/project/src/lib/apify.ts",[],[],"/home/project/src/lib/config.ts",[],[],"/home/project/src/lib/database.types.ts",[],[],"/home/project/src/lib/supabase.ts",[],[],"/home/project/src/lib/utils.ts",[],[],"/home/project/src/main.tsx",[],[],"/home/project/src/pages/dashboard.tsx",["617","618","619","620","621","622","623"],[],"import { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '@/hooks/use-auth';\nimport { refreshWorker } from '@/services/refresh-worker';\nimport { Container } from '@/components/layout/container';\nimport { Section } from '@/components/layout/section';\nimport { Button } from '@/components/ui/button';\nimport { AsinInput } from '@/components/forms/asin-input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Search, Settings, LogOut, HelpCircle } from 'lucide-react';\n\nexport function DashboardPage() {\n  const navigate = useNavigate();\n  const { user, signOut } = useAuth();\n  \n  useEffect(() => {\n    // Start the refresh worker when the dashboard loads\n    refreshWorker.start();\n    \n    // Clean up when component unmounts\n    return () => {\n      refreshWorker.stop();\n    };\n  }, []);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSignOut = async () => {\n    try {\n      await signOut();\n      navigate('/login');\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  const handleAsinSubmit = async (asins: string[]) => {\n    try {\n      setIsProcessing(true);\n      // TODO: Implement ASIN processing logic\n      console.log('Processing ASINs:', asins);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Container>\n        <Section>\n          <div className=\"space-y-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold tracking-tight\">Dashboard</h1>\n              <p className=\"text-muted-foreground\">\n                Welcome to your Spoiled Vine dashboard\n              </p>\n            </div>\n\n            <p className=\"text-muted-foreground\">\n              Your comprehensive platform for Amazon review analysis\n            </p>\n\n            <div className=\"grid gap-6 md:grid-cols-3\">\n              {/* Review Gathering */}\n              <Card className=\"relative overflow-hidden\">\n                <CardHeader>\n                  <div className=\"flex items-center space-x-2\">\n                    <Search className=\"h-5 w-5 text-primary\" />\n                    <CardTitle className=\"text-lg\">Review Gathering</CardTitle>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Search and analyze Amazon product reviews\n                  </p>\n                </CardContent>\n              </Card>\n\n              {/* Analytics Dashboard */}\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center space-x-2\">\n                    <svg\n                      className=\"h-5 w-5 text-primary\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeWidth=\"2\"\n                    >\n                      <path d=\"M3 3v18h18\" />\n                      <path d=\"M18 9l-5 5-2-2-3 3\" />\n                    </svg>\n                    <CardTitle className=\"text-lg\">Analytics Dashboard</CardTitle>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-muted-foreground\">\n                    View insights and trends from your reviews\n                  </p>\n                </CardContent>\n              </Card>\n\n              {/* Settings */}\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center space-x-2\">\n                    <Settings className=\"h-5 w-5 text-primary\" />\n                    <CardTitle className=\"text-lg\">Settings</CardTitle>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Configure your preferences and account settings\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Getting Started Section */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Getting Started</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"flex h-6 w-6 items-center justify-center rounded-full bg-primary/10 text-sm font-medium text-primary\">\n                    1\n                  </div>\n                  <div>\n                    <h3 className=\"font-medium\">Start Gathering Reviews</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Navigate to Review Gathering and enter Amazon ASINs to analyze product reviews\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"flex h-6 w-6 items-center justify-center rounded-full bg-primary/10 text-sm font-medium text-primary\">\n                    2\n                  </div>\n                  <div>\n                    <h3 className=\"font-medium\">View Analytics</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Check the Analytics Dashboard for insights and trends from your gathered reviews\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"flex h-6 w-6 items-center justify-center rounded-full bg-primary/10 text-sm font-medium text-primary\">\n                    3\n                  </div>\n                  <div>\n                    <h3 className=\"font-medium\">Configure Settings</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Customize your experience by adjusting your preferences in Settings\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Announcements Section */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Announcements</CardTitle>\n                  <span className=\"text-sm text-muted-foreground\">Latest updates and news</span>\n                </div>\n              </CardHeader>\n              <CardContent className=\"min-h-[100px] flex items-center justify-center text-muted-foreground\">\n                No announcements available\n              </CardContent>\n            </Card>\n\n            {/* Need Help Section */}\n            <div className=\"grid gap-6 md:grid-cols-2\">\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center space-x-2\">\n                    <HelpCircle className=\"h-5 w-5 text-primary\" />\n                    <CardTitle>Documentation</CardTitle>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Learn how to use Spoiled Vine effectively with our comprehensive documentation.\n                  </p>\n                  <Button variant=\"outline\" className=\"w-full\">\n                    View Documentation\n                  </Button>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center space-x-2\">\n                    <svg\n                      className=\"h-5 w-5 text-primary\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeWidth=\"2\"\n                    >\n                      <path d=\"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z\" />\n                    </svg>\n                    <CardTitle>Support</CardTitle>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Having issues? Our support team is here to help you resolve any problems.\n                  </p>\n                  <Button variant=\"outline\" className=\"w-full\">\n                    Contact Support →\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </Section>\n      </Container>\n    </div>\n  );\n}","/home/project/src/pages/login.tsx",[],[],"/home/project/src/pages/profile.tsx",["624","625","626","627","628","629","630","631","632","633","634"],[],"import { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useAuth } from '@/hooks/use-auth';\nimport { supabase } from '@/lib/supabase';\nimport { Container } from '@/components/layout/container';\nimport { Section } from '@/components/layout/section';\nimport { Button } from '@/components/ui/button';\nimport { useNavigate } from 'react-router-dom';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { LoadingSpinner } from '@/components/feedback/loading-spinner';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n  User,\n  Building2,\n  Bell,\n  Shield,\n  Clock,\n  Upload,\n  Mail,\n  Eye,\n  Key, \n  ArrowLeft\n} from 'lucide-react';\n\nconst profileSchema = z.object({\n  fullName: z.string().min(2, 'Full name is required'),\n  email: z.string().email('Invalid email address'),\n  bio: z.string().max(160).optional(),\n  location: z.string().optional(),\n});\n\ntype ProfileFormData = z.infer<typeof profileSchema>;\n\nexport function ProfilePage() {\n  const { user, updateProfile } = useAuth();\n  const { toast } = useToast();\n  const navigate = useNavigate();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [avatarFile, setAvatarFile] = useState<File | null>(null);\n  const [preferences, setPreferences] = useState({\n    emailNotifications: true,\n    pushNotifications: true,\n    weeklyDigest: true,\n    compactView: false,\n  });\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isDirty },\n    reset,\n  } = useForm<ProfileFormData>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      fullName: user?.user_metadata?.full_name || user?.user_metadata?.full_name || '',\n      email: user?.email || '',\n      bio: '',\n      location: '',\n    },\n  });\n\n  // Fetch profile data from users table when component mounts\n  useEffect(() => {\n    async function fetchProfileData() {\n      if (!user) return;\n      \n      const { data, error } = await supabase\n        .from('users')\n        .select('bio, location')\n        .eq('id', user.id)\n        .single();\n\n      if (data && !error) {\n        reset({\n          fullName: user.user_metadata?.full_name || '',\n          email: user.email || '',\n          bio: data.bio || '',\n          location: data.location || '',\n        });\n      }\n    }\n\n    fetchProfileData();\n  }, [user, reset]);\n\n  const onSubmit = async (data: ProfileFormData) => {\n    if (!isDirty) {\n      toast({\n        title: 'No changes',\n        description: 'No changes were made to your profile',\n      });\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      console.log('Profile form submission:', JSON.stringify(data, null, 2));\n\n      await updateProfile({\n        full_name: data.fullName,\n        bio: data.bio,\n        location: data.location,\n      });\n\n      // Reset form with the same values to clear dirty state\n      reset(data, { keepValues: true });\n      \n    } catch (error) {\n      console.error('Profile form submission error:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Failed to update profile';\n      setError(errorMessage);\n      toast({\n        title: 'Error',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Container>\n        <Section>\n          <div className=\"space-y-8\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n              <h1 className=\"text-3xl font-bold tracking-tight\">Profile</h1>\n              <p className=\"text-muted-foreground\">\n                Manage your account settings and preferences\n              </p>\n              </div>\n              <Button\n                variant=\"outline\"\n                onClick={() => navigate('/dashboard')}\n                className=\"flex items-center gap-2\"\n              >\n                <ArrowLeft className=\"h-4 w-4\" />\n                Back to Dashboard\n              </Button>\n            </div>\n\n            <Tabs defaultValue=\"general\" className=\"space-y-4\">\n              <TabsList>\n                <TabsTrigger value=\"general\">\n                  <User className=\"mr-2 h-4 w-4\" />\n                  General\n                </TabsTrigger>\n                <TabsTrigger value=\"preferences\">\n                  <Bell className=\"mr-2 h-4 w-4\" />\n                  Preferences\n                </TabsTrigger>\n                <TabsTrigger value=\"security\">\n                  <Shield className=\"mr-2 h-4 w-4\" />\n                  Security\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"general\">\n                <form onSubmit={handleSubmit(onSubmit)}>\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>General Information</CardTitle>\n                      <CardDescription>\n                        Update your profile information\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      {error && (\n                        <div className=\"p-3 text-sm text-red-500 bg-red-50 dark:bg-red-950/50 rounded-md\">\n                          {error}\n                        </div>\n                      )}\n\n                      <div className=\"flex items-center space-x-4\">\n                        <Avatar className=\"h-20 w-20\">\n                          <AvatarImage\n                            src={user?.user_metadata?.avatar_url}\n                            alt={user?.user_metadata?.full_name}\n                          />\n                          <AvatarFallback>\n                            {user?.user_metadata?.full_name?.[0] || 'U'}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Upload className=\"mr-2 h-4 w-4\" />\n                            Change Avatar\n                          </Button>\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"fullName\">Full Name</Label>\n                        <Input\n                          id=\"fullName\"\n                          {...register('fullName')}\n                        />\n                        {errors.fullName && (\n                          <p className=\"text-sm text-red-500\">\n                            {errors.fullName.message}\n                          </p>\n                        )}\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"email\">Email</Label>\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          disabled\n                          {...register('email')}\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"bio\">Bio</Label>\n                        <Input\n                          id=\"bio\"\n                          {...register('bio')}\n                          placeholder=\"Tell us about yourself\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"location\">Location</Label>\n                        <Input\n                          id=\"location\"\n                          {...register('location')}\n                          placeholder=\"City, Country\"\n                        />\n                      </div>\n\n                      <Button \n                        type=\"submit\" \n                        disabled={isLoading || !isDirty}\n                      >\n                        {isLoading ? (\n                          <LoadingSpinner className=\"mr-2\" size=\"sm\" />\n                        ) : null}\n                        {isLoading ? 'Saving...' : 'Save Changes'}\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </form>\n              </TabsContent>\n\n              <TabsContent value=\"preferences\">\n                <div className=\"grid gap-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Notification Preferences</CardTitle>\n                      <CardDescription>\n                        Manage how you receive notifications\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-0.5\">\n                          <Label>Email Notifications</Label>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Receive notifications via email\n                          </p>\n                        </div>\n                        <Switch\n                          checked={preferences.emailNotifications}\n                          onCheckedChange={(checked) =>\n                            setPreferences((prev) => ({\n                              ...prev,\n                              emailNotifications: checked,\n                            }))\n                          }\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-0.5\">\n                          <Label>Push Notifications</Label>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Receive push notifications in your browser\n                          </p>\n                        </div>\n                        <Switch\n                          checked={preferences.pushNotifications}\n                          onCheckedChange={(checked) =>\n                            setPreferences((prev) => ({\n                              ...prev,\n                              pushNotifications: checked,\n                            }))\n                          }\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-0.5\">\n                          <Label>Weekly Digest</Label>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Receive a weekly summary of activity\n                          </p>\n                        </div>\n                        <Switch\n                          checked={preferences.weeklyDigest}\n                          onCheckedChange={(checked) =>\n                            setPreferences((prev) => ({\n                              ...prev,\n                              weeklyDigest: checked,\n                            }))\n                          }\n                        />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Display Preferences</CardTitle>\n                      <CardDescription>\n                        Customize your viewing experience\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-0.5\">\n                          <Label>Compact View</Label>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Show more content in less space\n                          </p>\n                        </div>\n                        <Switch\n                          checked={preferences.compactView}\n                          onCheckedChange={(checked) =>\n                            setPreferences((prev) => ({\n                              ...prev,\n                              compactView: checked,\n                            }))\n                          }\n                        />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"security\">\n                <div className=\"grid gap-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Password</CardTitle>\n                      <CardDescription>\n                        Change your password\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"current\">Current Password</Label>\n                        <Input\n                          id=\"current\"\n                          type=\"password\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"new\">New Password</Label>\n                        <Input\n                          id=\"new\"\n                          type=\"password\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"confirm\">Confirm New Password</Label>\n                        <Input\n                          id=\"confirm\"\n                          type=\"password\"\n                        />\n                      </div>\n                      <Button>\n                        <Key className=\"mr-2 h-4 w-4\" />\n                        Change Password\n                      </Button>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Two-Factor Authentication</CardTitle>\n                      <CardDescription>\n                        Add an extra layer of security to your account\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <Button variant=\"outline\">\n                        <Shield className=\"mr-2 h-4 w-4\" />\n                        Enable 2FA\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </Section>\n      </Container>\n    </div>\n  );\n}","/home/project/src/pages/request-reset.tsx",["635"],[],"import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { LoadingSpinner } from '@/components/feedback/loading-spinner';\nimport { Wine, ArrowLeft } from 'lucide-react';\nimport { Container } from '@/components/layout/container';\n\nconst requestResetSchema = z.object({\n  email: z.string().email('Please enter a valid email address'),\n});\n\ntype RequestResetForm = z.infer<typeof requestResetSchema>;\n\nexport function RequestResetPage() {\n  const navigate = useNavigate();\n  const { resetPasswordRequest } = useAuth();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [lastRequestTime, setLastRequestTime] = useState<number | null>(null);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<RequestResetForm>({\n    resolver: zodResolver(requestResetSchema),\n  });\n\n  const onSubmit = async (data: RequestResetForm) => {\n    // Rate limiting check (1 request per minute)\n    if (lastRequestTime && Date.now() - lastRequestTime < 60000) {\n      setError('Please wait a minute before requesting another reset.');\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setError(null);\n      await resetPasswordRequest(data.email);\n      setIsSuccess(true);\n      setLastRequestTime(Date.now());\n    } catch (err: any) {\n      setError(err.message || 'Failed to send reset email. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center\">\n      <Container size=\"sm\">\n        <div className=\"flex flex-col items-center space-y-6\">\n          <div className=\"flex items-center justify-center space-x-2\">\n            <div className=\"p-2 rounded-full bg-primary/10\">\n              <Wine className=\"w-6 h-6 text-primary\" />\n            </div>\n            <h1 className=\"text-2xl font-bold\">Spoiled Vine</h1>\n          </div>\n\n          <Card className=\"w-full\">\n            <CardHeader>\n              <CardTitle>Reset your password</CardTitle>\n              <CardDescription>\n                Enter your email address and we'll send you a link to reset your password\n              </CardDescription>\n            </CardHeader>\n\n            {isSuccess ? (\n              <CardContent className=\"space-y-4\">\n                <div className=\"p-3 text-sm text-green-600 bg-green-50 dark:bg-green-950/50 dark:text-green-400 rounded-md\">\n                  If an account exists for that email, you will receive password reset instructions.\n                </div>\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full\"\n                  onClick={() => navigate('/login')}\n                >\n                  <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                  Return to login\n                </Button>\n              </CardContent>\n            ) : (\n              <form onSubmit={handleSubmit(onSubmit)}>\n                <CardContent className=\"space-y-4\">\n                  {error && (\n                    <div className=\"p-3 text-sm text-red-500 bg-red-50 dark:bg-red-950/50 rounded-md\">\n                      {error}\n                    </div>\n                  )}\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"name@example.com\"\n                      {...register('email')}\n                    />\n                    {errors.email && (\n                      <p className=\"text-sm text-red-500\">{errors.email.message}</p>\n                    )}\n                  </div>\n\n                  <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                    {isLoading ? (\n                      <LoadingSpinner className=\"mr-2\" size=\"sm\" />\n                    ) : null}\n                    Send reset instructions\n                  </Button>\n                </CardContent>\n              </form>\n            )}\n\n            <CardFooter className=\"flex justify-center\">\n              <Button\n                variant=\"link\"\n                className=\"text-sm text-muted-foreground\"\n                onClick={() => navigate('/login')}\n              >\n                Back to login\n              </Button>\n            </CardFooter>\n          </Card>\n        </div>\n      </Container>\n    </div>\n  );\n}","/home/project/src/pages/reset-password.tsx",["636","637"],[],"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { LoadingSpinner } from '@/components/feedback/loading-spinner';\nimport { Wine } from 'lucide-react';\nimport { Container } from '@/components/layout/container';\nimport { supabase } from '@/lib/supabase';\n\nconst passwordSchema = z\n  .string()\n  .min(8, 'Password must be at least 8 characters')\n  .regex(/[A-Z]/, 'Password must contain at least one uppercase letter')\n  .regex(/[a-z]/, 'Password must contain at least one lowercase letter')\n  .regex(/[0-9]/, 'Password must contain at least one number')\n  .regex(/[^A-Za-z0-9]/, 'Password must contain at least one special character');\n\nconst resetPasswordSchema = z\n  .object({\n    password: passwordSchema,\n    confirmPassword: z.string(),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords don't match\",\n    path: ['confirmPassword'],\n  });\n\ntype ResetPasswordForm = z.infer<typeof resetPasswordSchema>;\n\nfunction calculatePasswordStrength(password: string): number {\n  if (!password) return 0;\n  let strength = 0;\n  if (password.length >= 8) strength += 20;\n  if (/[A-Z]/.test(password)) strength += 20;\n  if (/[a-z]/.test(password)) strength += 20;\n  if (/[0-9]/.test(password)) strength += 20;\n  if (/[^A-Za-z0-9]/.test(password)) strength += 20;\n  return strength;\n}\n\nexport function ResetPasswordPage() {\n  const navigate = useNavigate();\n  const { resetPassword } = useAuth();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [passwordStrength, setPasswordStrength] = useState(0);\n  const [isValidToken, setIsValidToken] = useState(false);\n\n  useEffect(() => {\n    const checkSession = async () => {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) {\n        navigate('/login');\n      } else {\n        setIsValidToken(true);\n      }\n    };\n    \n    checkSession();\n  }, [navigate]);\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: { errors },\n  } = useForm<ResetPasswordForm>({\n    resolver: zodResolver(resetPasswordSchema),\n  });\n\n  const password = watch('password', '');\n\n  const onSubmit = async (data: ResetPasswordForm) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      await resetPassword(data.password);\n      navigate('/login', {\n        state: { message: 'Password has been reset successfully. Please log in with your new password.' },\n      });\n    } catch (err: any) {\n      setError(err.message || 'Failed to reset password. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (!isValidToken) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center\">\n      <Container size=\"sm\">\n        <div className=\"flex flex-col items-center space-y-6\">\n          <div className=\"flex items-center justify-center space-x-2\">\n            <div className=\"p-2 rounded-full bg-primary/10\">\n              <Wine className=\"w-6 h-6 text-primary\" />\n            </div>\n            <h1 className=\"text-2xl font-bold\">Spoiled Vine</h1>\n          </div>\n\n          <Card className=\"w-full\">\n            <CardHeader>\n              <CardTitle>Reset your password</CardTitle>\n              <CardDescription>\n                Please enter your new password\n              </CardDescription>\n            </CardHeader>\n\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <CardContent className=\"space-y-4\">\n                {error && (\n                  <div className=\"p-3 text-sm text-red-500 bg-red-50 dark:bg-red-950/50 rounded-md\">\n                    {error}\n                  </div>\n                )}\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">New Password</Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    {...register('password', {\n                      onChange: (e) =>\n                        setPasswordStrength(\n                          calculatePasswordStrength(e.target.value)\n                        ),\n                    })}\n                  />\n                  <Progress value={passwordStrength} className=\"h-1\" />\n                  <div className=\"text-sm text-muted-foreground\">\n                    Password strength:{' '}\n                    {passwordStrength < 40\n                      ? 'Weak'\n                      : passwordStrength < 80\n                      ? 'Medium'\n                      : 'Strong'}\n                  </div>\n                  {errors.password && (\n                    <p className=\"text-sm text-red-500\">\n                      {errors.password.message}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confirmPassword\">Confirm New Password</Label>\n                  <Input\n                    id=\"confirmPassword\"\n                    type=\"password\"\n                    {...register('confirmPassword')}\n                  />\n                  {errors.confirmPassword && (\n                    <p className=\"text-sm text-red-500\">\n                      {errors.confirmPassword.message}\n                    </p>\n                  )}\n                </div>\n\n                <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                  {isLoading ? (\n                    <LoadingSpinner className=\"mr-2\" size=\"sm\" />\n                  ) : null}\n                  Reset Password\n                </Button>\n              </CardContent>\n            </form>\n          </Card>\n        </div>\n      </Container>\n    </div>\n  );\n}","/home/project/src/pages/reviews/details.tsx",["638","639","640","641"],[],"import { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Container } from '@/components/layout/container';\nimport { Section } from '@/components/layout/section';\nimport { LoadingSpinner } from '@/components/feedback/loading-spinner';\nimport { Button } from '@/components/ui/button';\nimport { ProductHeader } from '@/components/reviews/product-header';\nimport { ProductInfo } from '@/components/reviews/product-info';\nimport { ReviewStats } from '@/components/reviews/review-stats';\nimport { ReviewList } from '@/components/reviews/review-list';\nimport { supabase } from '@/lib/supabase';\nimport { useToast } from '@/hooks/use-toast';\nimport { formatCurrency } from '@/lib/utils';\nimport { productScraperService } from '@/services/product-scraper';\n\ninterface ProductDetails {\n  id: string;\n  asin: string;\n  title: string;\n  brand: string;\n  price: number;\n  currency: string;\n  availability: string;\n  specifications: Record<string, string>;\n  dimensions?: {\n    width?: string;\n    height?: string;\n    length?: string;\n    weight?: string;\n  };\n  best_sellers_rank?: Array<{\n    category: string;\n    rank: number;\n  }>;\n  variations?: Array<{\n    title: string;\n    asin: string;\n    price?: number;\n    available?: boolean;\n  }>;\n  frequently_bought_together?: Array<{\n    asin: string;\n    title: string;\n    price?: number;\n  }>;\n  customer_questions?: Array<{\n    question: string;\n    answer: string;\n    votes: number;\n    date: string;\n  }>;\n  images: string[];\n  categories: string[];\n  features: string[];\n  description: string;\n  rating_data: {\n    rating: number;\n    reviewCount: number;\n    starsBreakdown: {\n      '5star': number;\n      '4star': number;\n      '3star': number;\n      '2star': number;\n      '1star': number;\n    };\n    lastUpdated: string | null;\n  };\n  review_summary: {\n    verifiedPurchases: number;\n    lastUpdated: string;\n  };\n  reviews: Array<{\n    id: string;\n    title: string;\n    text: string;\n    rating: number;\n    date: string;\n    verified: boolean;\n    author: string;\n    images?: string[];\n  }>;\n  status: string;\n  updated_at: string;\n}\n\nexport function DetailsPage() {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(true);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [product, setProduct] = useState<ProductDetails | null>(null);\n  const [violations, setViolations] = useState<Record<string, any>>({});\n  const [refreshStatus, setRefreshStatus] = useState<'idle' | 'refreshing'>('idle');\n  const [violationCount, setViolationCount] = useState(0);\n\n  useEffect(() => {\n    if (id) {\n      fetchProduct(id);\n      fetchViolations(id);\n    }\n  }, [id]);\n\n  const fetchViolations = async (productId: string) => {\n    try {\n      const { data, error } = await supabase\n        .from('review_violations') \n        .select('*')\n        .eq('product_id', productId)\n        .eq('overridden', false); // Only get non-overridden violations\n\n      if (error) throw error;\n\n      // Count total non-overridden violations\n      const totalViolations = data.reduce((count, violation) => {\n        return violation.overridden ? count : count + 1;\n      }, 0);\n      setViolationCount(totalViolations);\n\n      // Create a map of review_id to violations\n      const violationsMap = data.reduce((acc: Record<string, any>, violation) => {\n        if (!acc[violation.review_id]) {\n          acc[violation.review_id] = {\n            violations: [],\n            scanned_at: violation.scanned_at,\n            overridden: violation.overridden,\n            overridden_by: violation.overridden_by,\n            overridden_at: violation.overridden_at\n          };\n        }\n        \n        acc[violation.review_id].violations.push({\n            type: violation.violation_type,\n            category: violation.violation_category,\n            severity: violation.severity,\n            userBenefit: violation.user_benefit,\n            action: violation.action,\n            details: violation.details\n        });\n        \n        return acc;\n      }, {});\n\n      setViolations(violationsMap);\n    } catch (error) {\n      console.error('Error fetching violations:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to fetch review violations',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  const fetchProduct = async (productId: string) => {\n    try {\n      setIsLoading(true);\n      \n      // Fetch product details\n      const { data: productData, error: productError } = await supabase\n        .from('products')\n        .select(`\n          id,\n          asin,\n          title,\n          brand,\n          price,\n          currency,\n          availability,\n          specifications,\n          dimensions,\n          best_sellers_rank,\n          variations,\n          frequently_bought_together,\n          customer_questions,\n          images,\n          categories,\n          features,\n          description,\n          rating_data,\n          review_summary,\n          status,\n          updated_at\n        `)\n        .eq('id', productId)\n        .single();\n\n      if (productError) throw productError;\n      if (!productData) throw new Error('Product not found');\n      \n      // Fetch reviews\n      const { data: reviewsData, error: reviewsError } = await supabase\n        .from('reviews')\n        .select('*')\n        .eq('product_id', productId)\n        .order('review_date', { ascending: false });\n\n      if (reviewsError) throw reviewsError;\n      \n      const product = {\n        ...productData,\n        reviews: reviewsData || []\n      };\n      \n      setProduct(product as ProductDetails);\n    } catch (error) {\n      console.error('Error fetching product:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to fetch product details',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleRefresh = async () => {\n    if (!product) return;\n\n    try {\n      setIsRefreshing(true);\n      setRefreshStatus('refreshing');\n      \n      await supabase\n        .from('products')\n        .update({ status: 'refreshing' })\n        .eq('id', product.id);\n      \n      await productScraperService.startScraping([product.asin]);\n      toast({\n        title: 'Refresh Started',\n        description: 'Product data refresh has been initiated.',\n      });\n      \n      const interval = setInterval(async () => {\n        const { data } = await supabase\n          .from('products')\n          .select('status')\n          .eq('id', product.id)\n          .single();\n          \n        if (data?.status === 'active') {\n          clearInterval(interval);\n          setRefreshStatus('idle');\n          fetchProduct(product.id);\n        }\n      }, 2000);\n      \n      setTimeout(() => {\n        clearInterval(interval);\n        setRefreshStatus('idle');\n      }, 5 * 60 * 1000);\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'Failed to refresh data',\n        variant: 'destructive',\n      });\n      setRefreshStatus('idle');\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  if (!product) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold mb-4\">Product Not Found</h2>\n          <Button onClick={() => navigate('/reviews')}>Back to Products</Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Container>\n        <Section>\n          <div className=\"space-y-8\">\n            <ProductHeader\n              brand={product.brand}\n              asin={product.asin}\n              availability={product.availability}\n              isRefreshing={isRefreshing || refreshStatus === 'refreshing'}\n              onBack={() => navigate('/reviews')}\n              onRefresh={handleRefresh}\n            />\n\n            <div className=\"space-y-6\">\n              <ProductInfo product={product} />\n\n              <ReviewStats\n                productId={product.id}\n              />\n\n              <ReviewList\n                reviews={product.reviews}\n                violations={violations}\n              />\n            </div>\n          </div>\n        </Section>\n      </Container>\n    </div>\n  );\n}","/home/project/src/pages/reviews/gather.tsx",["642","643"],[],"import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Container } from '@/components/layout/container';\nimport { Section } from '@/components/layout/section';\nimport { Button } from '@/components/ui/button';\nimport { AsinInput } from '@/components/forms/asin-input';\nimport { ArrowLeft } from 'lucide-react';\nimport { productScraperService } from '@/services/product-scraper';\nimport { useToast } from '@/hooks/use-toast';\n\nexport function GatherPage() {\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleAsinSubmit = async (asins: string[]) => {\n    try {\n      setIsProcessing(true);\n      const taskId = await productScraperService.startScraping(asins);\n      \n      toast({\n        title: 'Processing Started',\n        description: `Started processing ${asins.length} products. You can view the progress in the Products list.`,\n      });\n      \n      navigate('/reviews');\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'Failed to process ASINs',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Container>\n        <Section>\n          <div className=\"space-y-8\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-3xl font-bold tracking-tight\">Gather Reviews</h1>\n                <p className=\"text-muted-foreground\">\n                  Add Amazon products to analyze their reviews\n                </p>\n              </div>\n              <Button\n                variant=\"outline\"\n                onClick={() => navigate('/dashboard')}\n                className=\"flex items-center gap-2\"\n              >\n                <ArrowLeft className=\"h-4 w-4\" />\n                Back to Dashboard\n              </Button>\n            </div>\n\n            <AsinInput onSubmit={handleAsinSubmit} />\n          </div>\n        </Section>\n      </Container>\n    </div>\n  );\n}","/home/project/src/pages/reviews/list.tsx",[],[],"/home/project/src/pages/signup.tsx",["644","645"],[],"import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { LoadingSpinner } from '@/components/feedback/loading-spinner';\nimport { Wine } from 'lucide-react';\nimport { Container } from '@/components/layout/container';\nimport { Progress } from '@/components/ui/progress';\n\nconst passwordSchema = z\n  .string()\n  .min(8, 'Password must be at least 8 characters')\n  .regex(/[A-Z]/, 'Password must contain at least one uppercase letter')\n  .regex(/[a-z]/, 'Password must contain at least one lowercase letter')\n  .regex(/[0-9]/, 'Password must contain at least one number')\n  .regex(/[^A-Za-z0-9]/, 'Password must contain at least one special character');\n\nconst signupSchema = z\n  .object({\n    email: z.string().email('Please enter a valid email address'),\n    password: passwordSchema,\n    confirmPassword: z.string(),\n    firstName: z.string().min(2, 'First name is required'),\n    lastName: z.string().min(2, 'Last name is required'),\n    acceptTerms: z.boolean().refine((val) => val === true, {\n      message: 'You must accept the terms and conditions',\n    }),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords don't match\",\n    path: ['confirmPassword'],\n  });\n\ntype SignupForm = z.infer<typeof signupSchema>;\n\nfunction calculatePasswordStrength(password: string): number {\n  if (!password) return 0;\n  let strength = 0;\n  if (password.length >= 8) strength += 20;\n  if (/[A-Z]/.test(password)) strength += 20;\n  if (/[a-z]/.test(password)) strength += 20;\n  if (/[0-9]/.test(password)) strength += 20;\n  if (/[^A-Za-z0-9]/.test(password)) strength += 20;\n  return strength;\n}\n\nexport function SignupPage() {\n  const navigate = useNavigate();\n  const { signUp } = useAuth();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [showTerms, setShowTerms] = useState(false);\n  const [passwordStrength, setPasswordStrength] = useState(0);\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    formState: { errors },\n  } = useForm<SignupForm>({\n    resolver: zodResolver(signupSchema),\n    defaultValues: {\n      acceptTerms: false,\n    },\n  });\n\n  const password = watch('password', '');\n\n  const onSubmit = async (data: SignupForm) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const { error: signUpError, data: signUpData } = await signUp(data.email, data.password);\n      \n      if (signUpError) {\n        throw signUpError;\n      }\n\n      if (signUpData.user && signUpData.user.identities && signUpData.user.identities.length === 0) {\n        setError('This email is already registered. Please try logging in instead.');\n        return;\n      }\n\n      navigate('/verify-email', { state: { email: data.email } });\n    } catch (err: any) {\n      setError(err.message || 'An error occurred during signup. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center py-8\">\n      <Container size=\"sm\">\n        <div className=\"flex flex-col items-center space-y-6\">\n          <div className=\"flex items-center justify-center space-x-2\">\n            <div className=\"p-2 rounded-full bg-primary/10\">\n              <Wine className=\"w-6 h-6 text-primary\" />\n            </div>\n            <h1 className=\"text-2xl font-bold\">Spoiled Vine</h1>\n          </div>\n\n          <Card className=\"w-full\">\n            <CardHeader>\n              <CardTitle>Create an account</CardTitle>\n              <CardDescription>\n                Join our community of wine enthusiasts\n              </CardDescription>\n            </CardHeader>\n\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <CardContent className=\"space-y-4\">\n                {error && (\n                  <div className=\"p-3 text-sm text-red-500 bg-red-50 dark:bg-red-950/50 rounded-md\">\n                    {error}\n                  </div>\n                )}\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"firstName\">First Name</Label>\n                    <Input\n                      id=\"firstName\"\n                      {...register('firstName')}\n                      autoComplete=\"given-name\"\n                    />\n                    {errors.firstName && (\n                      <p className=\"text-sm text-red-500\">\n                        {errors.firstName.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"lastName\">Last Name</Label>\n                    <Input\n                      id=\"lastName\"\n                      {...register('lastName')}\n                      autoComplete=\"family-name\"\n                    />\n                    {errors.lastName && (\n                      <p className=\"text-sm text-red-500\">\n                        {errors.lastName.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    {...register('email')}\n                    autoComplete=\"email\"\n                  />\n                  {errors.email && (\n                    <p className=\"text-sm text-red-500\">{errors.email.message}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">Password</Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    {...register('password', {\n                      onChange: (e) =>\n                        setPasswordStrength(\n                          calculatePasswordStrength(e.target.value)\n                        ),\n                    })}\n                  />\n                  <Progress value={passwordStrength} className=\"h-1\" />\n                  <div className=\"text-sm text-muted-foreground\">\n                    Password strength:{' '}\n                    {passwordStrength < 40\n                      ? 'Weak'\n                      : passwordStrength < 80\n                      ? 'Medium'\n                      : 'Strong'}\n                  </div>\n                  {errors.password && (\n                    <p className=\"text-sm text-red-500\">\n                      {errors.password.message}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                  <Input\n                    id=\"confirmPassword\"\n                    type=\"password\"\n                    {...register('confirmPassword')}\n                  />\n                  {errors.confirmPassword && (\n                    <p className=\"text-sm text-red-500\">\n                      {errors.confirmPassword.message}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"acceptTerms\"\n                    checked={watch('acceptTerms')}\n                    onCheckedChange={(checked) => {\n                      setValue('acceptTerms', checked === true);\n                    }}\n                  />\n                  <Label htmlFor=\"acceptTerms\" className=\"text-sm\">\n                    I agree to the{' '}\n                    <Button\n                      variant=\"link\"\n                      type=\"button\"\n                      className=\"p-0 h-auto font-normal\"\n                      onClick={() => setShowTerms(true)}\n                    >\n                      terms and conditions\n                    </Button>\n                  </Label>\n                </div>\n                {errors.acceptTerms && (\n                  <p className=\"text-sm text-red-500\">\n                    {errors.acceptTerms.message}\n                  </p>\n                )}\n\n                <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                  {isLoading ? (\n                    <LoadingSpinner className=\"mr-2\" size=\"sm\" />\n                  ) : null}\n                  Create Account\n                </Button>\n              </CardContent>\n            </form>\n\n            <CardFooter className=\"flex justify-center\">\n              <p className=\"text-sm text-muted-foreground\">\n                Already have an account?{' '}\n                <Button\n                  variant=\"link\"\n                  className=\"px-0\"\n                  onClick={() => navigate('/login')}\n                >\n                  Sign in\n                </Button>\n              </p>\n            </CardFooter>\n          </Card>\n        </div>\n      </Container>\n\n      <Dialog open={showTerms} onOpenChange={setShowTerms}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Terms and Conditions</DialogTitle>\n            <DialogDescription>\n              Please read our terms and conditions carefully.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"max-h-[60vh] overflow-auto\">\n            <div className=\"space-y-4 text-sm\">\n              <p>\n                Welcome to Spoiled Vine. By creating an account, you agree to the\n                following terms:\n              </p>\n              <ul className=\"list-disc pl-6 space-y-2\">\n                <li>\n                  You must be at least 21 years old to use our services.\n                </li>\n                <li>\n                  You agree to provide accurate and complete information when\n                  creating your account.\n                </li>\n                <li>\n                  You are responsible for maintaining the security of your account\n                  credentials.\n                </li>\n                <li>\n                  You agree to use the service in compliance with all applicable\n                  laws and regulations.\n                </li>\n                <li>\n                  We reserve the right to suspend or terminate accounts that\n                  violate our terms.\n                </li>\n              </ul>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","/home/project/src/pages/verify-email.tsx",[],[],"/home/project/src/services/product-scraper.ts",["646"],[],"import { apifyService } from '@/lib/apify';\nimport { reviewScraperService } from './review-scraper';\nimport { supabase } from '@/lib/supabase';\n\ninterface ScrapingTask {\n  id: string;\n  asins: string[];\n  status: 'pending' | 'processing' | 'completed' | 'failed' | 'refreshing';\n  progress: number;\n  error?: string;\n  startedAt: string;\n  completedAt?: string;\n}\n\nexport class ProductScraperService {\n  private tasks: Map<string, ScrapingTask> = new Map();\n\n  async startScraping(asins: string[]): Promise<string> {\n    try {\n      // Start Apify task\n      const taskId = await apifyService.startScraping(asins);\n\n      // Store task information\n      const task: ScrapingTask = {\n        id: taskId,\n        asins,\n        status: 'pending',\n        progress: 0,\n        startedAt: new Date().toISOString(),\n      };\n\n      this.tasks.set(taskId, task);\n\n      // Start monitoring task progress\n      this.monitorTask(taskId);\n\n      return taskId;\n    } catch (error) {\n      console.error('Failed to start scraping:', error);\n      throw error;\n    }\n  }\n\n  async getTaskStatus(taskId: string): Promise<ScrapingTask | null> {\n    return this.tasks.get(taskId) || null;\n  }\n\n  private async monitorTask(taskId: string) {\n    const task = this.tasks.get(taskId);\n    if (!task) return;\n    \n    // Update product status to refreshing\n    try {\n      for (const asin of task.asins) {\n        await supabase\n          .from('products')\n          .update({ status: 'refreshing' })\n          .eq('asin', asin);\n      }\n    } catch (error) {\n      console.error('Error updating product status:', error);\n    }\n\n    try {\n      const status = await apifyService.getTaskStatus(taskId);\n\n      // Update task status\n      task.status =\n        status.status === 'SUCCEEDED'\n          ? 'completed'\n          : status.status === 'FAILED'\n          ? 'failed'\n          : 'processing';\n      task.progress = status.progress;\n\n      if (status.error) {\n        task.error = status.error;\n      }\n\n      this.tasks.set(taskId, task);\n\n      // If task is completed, process results\n      if (task.status === 'completed') {\n        await this.processResults(taskId);\n        // Update product status back to active\n        for (const asin of task.asins) {\n          await supabase\n            .from('products')\n            .update({ status: 'active' })\n            .eq('asin', asin);\n        }\n      }\n      // If task is still running, continue monitoring\n      else if (task.status === 'processing') {\n        setTimeout(() => this.monitorTask(taskId), 5000);\n      }\n    } catch (error) {\n      console.error('Error monitoring task:', error);\n      task.status = 'failed';\n      task.error = error instanceof Error ? error.message : 'Unknown error';\n      this.tasks.set(taskId, task);\n    }\n  }\n\n  private async processResults(taskId: string) {\n    try {\n      const results = await apifyService.getResults(taskId);\n\n      if (!Array.isArray(results) || results.length === 0) {\n        throw new Error('Invalid results format from Apify');\n      }\n\n      // Store results in Supabase\n      for (const product of results) {\n        try {\n          if (!product?.asin) {\n            console.warn('Skipping invalid product:', product);\n            continue;\n          }\n\n          // Get existing product first\n          const { data: existingProduct } = await supabase\n            .from('products')\n            .select('id')\n            .eq('asin', product.asin)\n            .maybeSingle();\n\n          // Store rating data from product scraper\n          const rating_data = {\n            rating: product.stars || 0,\n            reviewCount: product.reviewsCount || 0,\n            starsBreakdown: {\n              '5star': product.starsBreakdown?.['5star'] || 0,\n              '4star': product.starsBreakdown?.['4star'] || 0,\n              '3star': product.starsBreakdown?.['3star'] || 0,\n              '2star': product.starsBreakdown?.['2star'] || 0,\n              '1star': product.starsBreakdown?.['1star'] || 0\n            },\n            lastUpdated: new Date().toISOString()\n          };\n          \n          const productData = {\n            asin: product.asin,\n            title: product.title,\n            brand: product.brand,\n            price: typeof product.price === 'object' ? product.price.value : product.price,\n            currency: product.currency,\n            availability: product.availability,\n            dimensions: product.dimensions,\n            specifications: product.specifications,\n            best_sellers_rank: product.bestSellersRank,\n            variations: product.variations,\n            frequently_bought_together: product.frequentlyBoughtTogether,\n            customer_questions: product.customerQuestions,\n            images: Array.isArray(product.images) \n              ? product.images\n                .filter(url => url && typeof url === 'string' && url.startsWith('http'))\n                .slice(0, 10)\n              : [],\n            categories: product.categories,\n            features: product.features,\n            description: product.description,\n            rating_data: rating_data,\n            status: 'active',\n            updated_at: new Date().toISOString()\n          };\n\n          // Insert or update product with upsert\n          const { error: updateError } = await supabase\n            .from('products')\n            .upsert(\n              {\n                ...productData,\n                id: existingProduct?.id || undefined\n              },\n              {\n                onConflict: 'asin',\n                ignoreDuplicates: false\n              }\n            );\n\n          if (updateError) {\n            throw updateError;\n          }\n          \n        } catch (error) {\n          console.error(`Failed to process product ${product.asin}:`, error);\n          throw error;\n        }\n      }\n\n      // Mark task as completed\n      const task = this.tasks.get(taskId);\n      if (task) {\n        task.completedAt = new Date().toISOString();\n        task.status = 'completed';\n        this.tasks.set(taskId, task);\n      }\n    } catch (error) {\n      console.error('Error processing results:', error);\n      const task = this.tasks.get(taskId);\n      if (task) {\n        task.status = 'failed';\n        task.error = error instanceof Error ? error.message : 'Unknown error';\n        this.tasks.set(taskId, task);\n      }\n      throw error;\n    }\n  }\n}\n\nexport const productScraperService = new ProductScraperService();","/home/project/src/services/queue-manager.ts",[],[],"/home/project/src/services/refresh-worker.ts",["647"],[],"import { supabase } from '@/lib/supabase';\nimport { productScraperService } from './product-scraper';\nimport { useToast } from '@/hooks/use-toast';\n\nclass RefreshWorker {\n  private isRunning = false;\n  private intervalId: NodeJS.Timeout | null = null;\n  private batchSize = 5; // Number of products to refresh in each batch\n  private checkInterval = 2 * 60 * 1000; // Check every 2 minutes\n  private retryDelay = 30 * 1000; // Retry after 30 seconds on error\n\n  async start() {\n    if (this.isRunning) {\n      console.log('Refresh worker is already running');\n      return;\n    }\n\n    this.isRunning = true;\n    console.log('Starting refresh worker...');\n\n    // Start the refresh cycle\n    this.intervalId = setInterval(() => this.refreshCycle(), this.checkInterval);\n    \n    // Run first cycle immediately\n    this.refreshCycle();\n  }\n\n  stop() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n    this.isRunning = false;\n    console.log('Refresh worker stopped');\n  }\n\n  private async refreshCycle() {\n    try {\n      // Get products that need refreshing\n      const { data: products, error } = await supabase.rpc('get_products_to_refresh', {\n        batch_size: this.batchSize\n      });\n\n      if (error) throw error;\n      if (!products || products.length === 0) {\n        console.log('No products need refreshing');\n        return; // No products need refreshing\n      }\n\n      console.log(`Found ${products.length} products to refresh:`, \n        products.map(p => p.asin).join(', '));\n\n      // Group products by batch to avoid overloading the scraper\n      const asins = products.map(product => product.asin);\n      const productIds = products.map(product => product.product_id);\n\n      try {\n        // Start scraping\n        console.log('Starting scraping for ASINs:', asins.join(', '));\n        await productScraperService.startScraping(asins);\n\n        // Mark products as successfully refreshed\n        for (const productId of productIds) {\n          const { error: markError } = await supabase.rpc('mark_product_refreshed', {\n            p_product_id: productId,\n            p_success: true\n          });\n          \n          if (markError) {\n            console.error(`Error marking product ${productId} as refreshed:`, markError);\n          }\n        }\n        \n        console.log('Successfully refreshed products:', asins.join(', '));\n      } catch (error) {\n        console.error('Error refreshing products:', error);\n        \n        // Mark products as failed\n        for (const productId of productIds) {\n          const { error: markError } = await supabase.rpc('mark_product_refreshed', {\n            p_product_id: productId,\n            p_success: false,\n            p_error: error instanceof Error ? error.message : 'Unknown error'\n          });\n          \n          if (markError) {\n            console.error(`Error marking product ${productId} as failed:`, markError);\n          }\n        }\n        \n        // Schedule retry after delay\n        setTimeout(() => this.refreshCycle(), this.retryDelay);\n      }\n    } catch (error) {\n      console.error('Error in refresh cycle:', error);\n      // Schedule retry after delay\n      setTimeout(() => this.refreshCycle(), this.retryDelay);\n    }\n  }\n}\n\n// Create singleton instance\nexport const refreshWorker = new RefreshWorker();","/home/project/src/services/review-scraper.ts",[],[],{"ruleId":"648","severity":2,"message":"649","line":57,"column":25,"nodeType":"650","messageId":"651","endLine":57,"endColumn":30},{"ruleId":"648","severity":2,"message":"649","line":58,"column":26,"nodeType":"650","messageId":"651","endLine":58,"endColumn":31},{"ruleId":"648","severity":2,"message":"652","line":72,"column":7,"nodeType":"650","messageId":"651","endLine":72,"endColumn":8},{"ruleId":"648","severity":2,"message":"653","line":2,"column":10,"nodeType":"650","messageId":"651","endLine":2,"endColumn":18},{"ruleId":"648","severity":2,"message":"654","line":2,"column":20,"nodeType":"650","messageId":"651","endLine":2,"endColumn":29},{"ruleId":"648","severity":2,"message":"655","line":29,"column":10,"nodeType":"650","messageId":"651","endLine":29,"endColumn":18},{"ruleId":"656","severity":2,"message":"657","line":106,"column":37,"nodeType":"658","messageId":"659","endLine":106,"endColumn":40,"suggestions":"660"},{"ruleId":"648","severity":2,"message":"661","line":7,"column":67,"nodeType":"650","messageId":"651","endLine":7,"endColumn":70},{"ruleId":"648","severity":2,"message":"662","line":7,"column":72,"nodeType":"650","messageId":"651","endLine":7,"endColumn":78},{"ruleId":"656","severity":2,"message":"657","line":30,"column":12,"nodeType":"658","messageId":"659","endLine":30,"endColumn":15,"suggestions":"663"},{"ruleId":"648","severity":2,"message":"664","line":34,"column":7,"nodeType":"650","messageId":"651","endLine":34,"endColumn":18},{"ruleId":"648","severity":2,"message":"665","line":35,"column":7,"nodeType":"650","messageId":"651","endLine":35,"endColumn":18},{"ruleId":"656","severity":2,"message":"657","line":103,"column":42,"nodeType":"658","messageId":"659","endLine":103,"endColumn":45,"suggestions":"666"},{"ruleId":"648","severity":2,"message":"667","line":106,"column":13,"nodeType":"650","messageId":"651","endLine":106,"endColumn":22},{"ruleId":"656","severity":2,"message":"657","line":181,"column":48,"nodeType":"658","messageId":"659","endLine":181,"endColumn":51,"suggestions":"668"},{"ruleId":"648","severity":2,"message":"669","line":238,"column":11,"nodeType":"650","messageId":"651","endLine":238,"endColumn":25},{"ruleId":"670","severity":2,"message":"671","line":238,"column":11,"nodeType":"650","messageId":"672","endLine":238,"endColumn":25,"fix":"673"},{"ruleId":"648","severity":2,"message":"674","line":1,"column":13,"nodeType":"650","messageId":"651","endLine":1,"endColumn":18},{"ruleId":"648","severity":2,"message":"675","line":1,"column":32,"nodeType":"650","messageId":"651","endLine":1,"endColumn":42},{"ruleId":"656","severity":2,"message":"657","line":14,"column":65,"nodeType":"658","messageId":"659","endLine":14,"endColumn":68,"suggestions":"676"},{"ruleId":"656","severity":2,"message":"657","line":14,"column":76,"nodeType":"658","messageId":"659","endLine":14,"endColumn":79,"suggestions":"677"},{"ruleId":"648","severity":2,"message":"678","line":166,"column":21,"nodeType":"650","messageId":"651","endLine":166,"endColumn":35},{"ruleId":"648","severity":2,"message":"679","line":1,"column":37,"nodeType":"650","messageId":"651","endLine":1,"endColumn":42},{"ruleId":"648","severity":2,"message":"680","line":8,"column":10,"nodeType":"650","messageId":"651","endLine":8,"endColumn":19},{"ruleId":"648","severity":2,"message":"681","line":10,"column":10,"nodeType":"650","messageId":"651","endLine":10,"endColumn":15},{"ruleId":"648","severity":2,"message":"682","line":11,"column":28,"nodeType":"650","messageId":"651","endLine":11,"endColumn":34},{"ruleId":"648","severity":2,"message":"683","line":15,"column":11,"nodeType":"650","messageId":"651","endLine":15,"endColumn":15},{"ruleId":"648","severity":2,"message":"684","line":26,"column":10,"nodeType":"650","messageId":"651","endLine":26,"endColumn":22},{"ruleId":"648","severity":2,"message":"685","line":28,"column":9,"nodeType":"650","messageId":"651","endLine":28,"endColumn":22},{"ruleId":"648","severity":2,"message":"686","line":37,"column":9,"nodeType":"650","messageId":"651","endLine":37,"endColumn":25},{"ruleId":"648","severity":2,"message":"687","line":21,"column":3,"nodeType":"650","messageId":"651","endLine":21,"endColumn":9},{"ruleId":"648","severity":2,"message":"688","line":22,"column":3,"nodeType":"650","messageId":"651","endLine":22,"endColumn":16},{"ruleId":"648","severity":2,"message":"689","line":23,"column":3,"nodeType":"650","messageId":"651","endLine":23,"endColumn":13},{"ruleId":"648","severity":2,"message":"690","line":24,"column":3,"nodeType":"650","messageId":"651","endLine":24,"endColumn":16},{"ruleId":"648","severity":2,"message":"691","line":25,"column":3,"nodeType":"650","messageId":"651","endLine":25,"endColumn":14},{"ruleId":"648","severity":2,"message":"692","line":34,"column":3,"nodeType":"650","messageId":"651","endLine":34,"endColumn":12},{"ruleId":"648","severity":2,"message":"693","line":37,"column":3,"nodeType":"650","messageId":"651","endLine":37,"endColumn":8},{"ruleId":"648","severity":2,"message":"694","line":39,"column":3,"nodeType":"650","messageId":"651","endLine":39,"endColumn":7},{"ruleId":"648","severity":2,"message":"695","line":40,"column":3,"nodeType":"650","messageId":"651","endLine":40,"endColumn":6},{"ruleId":"648","severity":2,"message":"696","line":60,"column":10,"nodeType":"650","messageId":"651","endLine":60,"endColumn":20},{"ruleId":"648","severity":2,"message":"697","line":60,"column":22,"nodeType":"650","messageId":"651","endLine":60,"endColumn":35},{"ruleId":"656","severity":2,"message":"657","line":57,"column":19,"nodeType":"658","messageId":"659","endLine":57,"endColumn":22,"suggestions":"698"},{"ruleId":"648","severity":2,"message":"699","line":84,"column":9,"nodeType":"650","messageId":"651","endLine":84,"endColumn":17},{"ruleId":"656","severity":2,"message":"657","line":94,"column":19,"nodeType":"658","messageId":"659","endLine":94,"endColumn":22,"suggestions":"700"},{"ruleId":"648","severity":2,"message":"701","line":13,"column":10,"nodeType":"650","messageId":"651","endLine":13,"endColumn":24},{"ruleId":"656","severity":2,"message":"657","line":93,"column":63,"nodeType":"658","messageId":"659","endLine":93,"endColumn":66,"suggestions":"702"},{"ruleId":"648","severity":2,"message":"703","line":95,"column":10,"nodeType":"650","messageId":"651","endLine":95,"endColumn":24},{"ruleId":"656","severity":2,"message":"657","line":121,"column":62,"nodeType":"658","messageId":"659","endLine":121,"endColumn":65,"suggestions":"704"},{"ruleId":"648","severity":2,"message":"684","line":14,"column":10,"nodeType":"650","messageId":"651","endLine":14,"endColumn":22},{"ruleId":"648","severity":2,"message":"705","line":19,"column":13,"nodeType":"650","messageId":"651","endLine":19,"endColumn":19},{"ruleId":"648","severity":2,"message":"699","line":89,"column":9,"nodeType":"650","messageId":"651","endLine":89,"endColumn":17},{"ruleId":"656","severity":2,"message":"657","line":107,"column":19,"nodeType":"658","messageId":"659","endLine":107,"endColumn":22,"suggestions":"706"},{"ruleId":"648","severity":2,"message":"707","line":2,"column":10,"nodeType":"650","messageId":"651","endLine":2,"endColumn":30},{"ruleId":"648","severity":2,"message":"708","line":3,"column":10,"nodeType":"650","messageId":"651","endLine":3,"endColumn":18},"@typescript-eslint/no-unused-vars","'props' is defined but never used.","Identifier","unusedVar","'_' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'supabase' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["709","710"],"'Ban' is defined but never used.","'Shield' is defined but never used.",["711","712"],"'MAX_RETRIES' is assigned a value but never used.","'RETRY_DELAY' is assigned a value but never used.",["713","714"],"'timeoutId' is assigned a value but never used.",["715","716"],"'processedCount' is assigned a value but never used.","prefer-const","'processedCount' is never reassigned. Use 'const' instead.","useConst",{"range":"717","text":"718"},"'React' is defined but never used.","'useContext' is defined but never used.",["719","720"],["721","722"],"'updatedProfile' is assigned a value but never used.","'Toast' is defined but never used.","'AsinInput' is defined but never used.","'Input' is defined but never used.","'LogOut' is defined but never used.","'user' is assigned a value but never used.","'isProcessing' is assigned a value but never used.","'handleSignOut' is assigned a value but never used.","'handleAsinSubmit' is assigned a value but never used.","'Select' is defined but never used.","'SelectContent' is defined but never used.","'SelectItem' is defined but never used.","'SelectTrigger' is defined but never used.","'SelectValue' is defined but never used.","'Building2' is defined but never used.","'Clock' is defined but never used.","'Mail' is defined but never used.","'Eye' is defined but never used.","'avatarFile' is assigned a value but never used.","'setAvatarFile' is assigned a value but never used.",["723","724"],"'password' is assigned a value but never used.",["725","726"],"'formatCurrency' is defined but never used.",["727","728"],"'violationCount' is assigned a value but never used.",["729","730"],"'taskId' is assigned a value but never used.",["731","732"],"'reviewScraperService' is defined but never used.","'useToast' is defined but never used.",{"messageId":"733","fix":"734","desc":"735"},{"messageId":"736","fix":"737","desc":"738"},{"messageId":"733","fix":"739","desc":"735"},{"messageId":"736","fix":"740","desc":"738"},{"messageId":"733","fix":"741","desc":"735"},{"messageId":"736","fix":"742","desc":"738"},{"messageId":"733","fix":"743","desc":"735"},{"messageId":"736","fix":"744","desc":"738"},[7736,7759],"const processedCount = 0;",{"messageId":"733","fix":"745","desc":"735"},{"messageId":"736","fix":"746","desc":"738"},{"messageId":"733","fix":"747","desc":"735"},{"messageId":"736","fix":"748","desc":"738"},{"messageId":"733","fix":"749","desc":"735"},{"messageId":"736","fix":"750","desc":"738"},{"messageId":"733","fix":"751","desc":"735"},{"messageId":"736","fix":"752","desc":"738"},{"messageId":"733","fix":"753","desc":"735"},{"messageId":"736","fix":"754","desc":"738"},{"messageId":"733","fix":"755","desc":"735"},{"messageId":"736","fix":"756","desc":"738"},{"messageId":"733","fix":"757","desc":"735"},{"messageId":"736","fix":"758","desc":"738"},"suggestUnknown",{"range":"759","text":"760"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"761","text":"762"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"763","text":"760"},{"range":"764","text":"762"},{"range":"765","text":"760"},{"range":"766","text":"762"},{"range":"767","text":"760"},{"range":"768","text":"762"},{"range":"769","text":"760"},{"range":"770","text":"762"},{"range":"771","text":"760"},{"range":"772","text":"762"},{"range":"773","text":"760"},{"range":"774","text":"762"},{"range":"775","text":"760"},{"range":"776","text":"762"},{"range":"777","text":"760"},{"range":"778","text":"762"},{"range":"779","text":"760"},{"range":"780","text":"762"},{"range":"781","text":"760"},{"range":"782","text":"762"},[3212,3215],"unknown",[3212,3215],"never",[955,958],[955,958],[3285,3288],[3285,3288],[5933,5936],[5933,5936],[580,583],[580,583],[591,594],[591,594],[1835,1838],[1835,1838],[2997,3000],[2997,3000],[2535,2538],[2535,2538],[3441,3444],[3441,3444],[3424,3427],[3424,3427]]